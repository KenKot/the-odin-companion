{
  "courses": [
    {
      "title": "Foundations",
      "lessons": [
        {
          "title": "Prerequisites",
          "flashcards": [
            {
              "question": "Is Windows an operating system or an application?",
              "answer": "Windows is an operating system."
            },
            {
              "question": "What’s the difference between open source and closed source software?",
              "answer": "Open source software is software that can be freely accessed, used, changed, and shared by anyone. Closed source software is software that can only be used and accessed by the people who have been given permission to do so by the owner or creator of the software."
            },
            {
              "question": "What are some use cases of a screenshot?",
              "answer": "Some use cases for a screenshot are to save an image of what is on your screen, to share something you are seeing on your screen with someone else, or to capture an error message."
            },
            {
              "question": "Give an example of a weak and a strong password.",
              "answer": "A weak password might be 'password' or '1234'. A strong password would be a combination of letters, numbers, and symbols that is not easily guessed."
            },
            {
              "question": "What is a web server?",
              "answer": "A web server is a computer that stores and delivers web pages. It is connected to the Internet and runs web server software that listens for requests from web browsers. When a browser requests a web page from a web server, the server sends the page back to the browser."
            },
            {
              "question": "What is a network?",
              "answer": "A network is a system of computers and other devices that are connected together in order to share data and resources."
            },
            {
              "question": "What is the internet?",
              "answer": "The internet is a global network of computers connected by phone lines, fiber-optic cables, and satellite."
            },
            {
              "question": "What is an IP address?",
              "answer": "An IP address is a unique numerical identifier assigned to each computer connected to the Internet."
            },
            {
              "question": "What is a router?",
              "answer": "A router is a device that connects two or more computer networks."
            },
            {
              "question": "What is an ISP?",
              "answer": "An ISP is an Internet Service Provider. This is a company that provides access to the internet, usually for a fee."
            },
            {
              "question": "What are packets and how are they used to transfer data?",
              "answer": "A packet is a small unit of data that is sent over a computer network. Packets are used to transfer data between devices on a network."
            },
            {
              "question": "What is a client?",
              "answer": "A client is someone who buys goods or services from a business."
            },
            {
              "question": "What is a server?",
              "answer": "A server is a computer that provides data to other computers. It may provide data to computers on the same network, or to computers on the Internet."
            },
            {
              "question": "What is a web page?",
              "answer": "A web page is a document that is typically written in HTML and is accessed through a web browser on the Internet."
            },
            {
              "question": "What is a web browser?",
              "answer": "A web browser is a software application that enables a user to display and interact with text, images, videos, and other information on a computer screen or mobile device."
            },
            {
              "question": "What is a search engine?",
              "answer": "A search engine is a tool that allows users to find information on the internet."
            },
            {
              "question": "What is a DNS request?",
              "answer": "A DNS request is a query that is sent to a DNS server in order to resolve a hostname to an IP address."
            },
            {
              "question": "Which browser are you currently using?",
              "answer": "I am currently using the Google Chrome browser."
            },
            {
              "question": "In your own words, explain what happens when you run a search on google.com.",
              "answer": "When you search for something on Google, the company's algorithms scour the internet for pages that might be relevant to what you're looking for and rank them in order of what it believes is most relevant."
            },
            {
              "question": "What is the command line?",
              "answer": "A command line is a text-based interface that allows users to type commands to perform tasks on a computer or other device."
            },
            {
              "question": "How do you open the command line on your computer?",
              "answer": "To open the command line on a Windows computer, go to the Start menu and type 'cmd' into the search bar. On a Mac, open the Terminal application."
            },
            {
              "question": "How can you navigate to a particular directory?",
              "answer": "There are a few ways to navigate to a directory:\n\n- Use the 'cd' command to change directories. For example, 'cd /home/user/Documents' will navigate to the Documents directory.\n- Use the 'ls' command to list the contents of the current directory. This can be useful to find the name of the directory you want to navigate to.\n- Use a file manager. This is a graphical way to browse the file system and can be found in the applications menu on most Linux distributions."
            },
            {
              "question": "Where will cd on its own navigate you to?",
              "answer": "The cd command will navigate you to your home directory."
            },
            {
              "question": "Where will cd .. navigate you to?",
              "answer": "The cd .. command will navigate you to the parent directory of the current directory."
            },
            {
              "question": "How do you display the name of the directory you are currently in?",
              "answer": "pwd"
            },
            {
              "question": "What does the ls command do?",
              "answer": "ls lists the contents of the current directory"
            },
            {
              "question": "How do you display the contents of the directory you are currently in?",
              "answer": "The contents of the current directory can be displayed using the ls command."
            },
            {
              "question": "How do you create a new directory?",
              "answer": "The command to create a new directory is mkdir"
            },
            {
              "question": "How do you create a new file?",
              "answer": "touch filename.txt"
            },
            {
              "question": "How do you destroy a directory or file?",
              "answer": "You can destroy a directory or file by using the rm command."
            },
            {
              "question": "How do you rename a directory or file?",
              "answer": "The command to rename a directory or file is \"mv\"."
            }
          ]
        },
        {
          "title": "Git Basics",
          "flashcards": [
            {
              "question": "What kind of program is Git?",
              "answer": "Git is a distributed version control system."
            },
            {
              "question": "What are the differences between Git and a text editor in terms of what they save and their record keeping?",
              "answer": "Git saves snapshots of a project as it changes over time, whereas a text editor just saves the most recent version of a project. Git keeps a history of all the changes made to a project, whereas a text editor does not."
            },
            {
              "question": "Does Git work at a local or remote level?",
              "answer": "Git works at both a local and remote level."
            },
            {
              "question": "Does GitHub work at a local or remote level?",
              "answer": "GitHub works at a remote level."
            },
            {
              "question": "Why is Git useful for developers?",
              "answer": "Git is useful for developers because it allows them to easily track changes to their code and collaborate with other developers on projects."
            },
            {
              "question": "Why are Git and GitHub useful for a team of developers?",
              "answer": "GitHub is a web-based hosting service for software development projects that use the Git revision control system. Git is a distributed revision control system with an emphasis on speed, data integrity, and support for distributed, non-linear workflows."
            },
            {
              "question": "How do you create a new repository on GitHub?",
              "answer": "To create a new repository on GitHub, click on the '+' icon in the top right corner and select 'New repository'."
            },
            {
              "question": "How do you copy a repository onto your local machine from GitHub?",
              "answer": "There are a few ways to do this: 1. If you have the GitHub Desktop application, you can clone repositories directly from the app. 2. If you prefer to use the command line, you can use the 'git clone' command. 3. You can also download repositories as zip files from the GitHub website."
            },
            {
              "question": "What is the default name of your remote connection?",
              "answer": "The default name of your remote connection is 'Remote Desktop Connection.'"
            },
            {
              "question": "Explain what origin is in git push origin main.",
              "answer": "The 'origin' in 'git push origin main' is the name of the remote repository that you are pushing to. 'main' is the name of the branch that you are pushing."
            },
            {
              "question": "Explain what main is in git push origin main.",
              "answer": "The main command in git push origin main is used to push the changes from your local repository to the remote repository."
            },
            {
              "question": "Explain the two-stage system that Git uses to save files.",
              "answer": "Git uses a two-stage system to save files. The first stage is the git add command, which adds a file to the staging area. The second stage is the git commit command, which commits the file to the repository."
            },
            {
              "question": "How do you check the status of your current repository?",
              "answer": "The status of the current repository can be checked by running the 'git status' command."
            },
            {
              "question": "How do you add files to the staging area in git?",
              "answer": "You can add files to the staging area in git by using the 'git add' command."
            },
            {
              "question": "How do you commit the files in the staging area and add a descriptive message?",
              "answer": "To commit the files in the staging area and add a descriptive message, use the 'git commit -m' command."
            },
            {
              "question": "How do you push your changes to your repository on GitHub?",
              "answer": "git push"
            },
            {
              "question": "How do you look at the history of your previous commits?",
              "answer": "You can view the history of your previous commits by using the 'git log' command."
            }
          ]
        },
        {
          "title": "HTML Foundations",
          "flashcards": [
            {
              "question": "What do HTML and CSS stand for?",
              "answer": "HTML stands for Hypertext Markup Language. CSS stands for Cascading Style Sheets."
            },
            {
              "question": "Between HTML and CSS, which would you use for putting paragraphs of text on a webpage?",
              "answer": "You would use HTML to put paragraphs of text on a webpage."
            },
            {
              "question": "Between HTML and CSS, which would you use for changing the font and background color of a button?",
              "answer": "CSS"
            },
            {
              "question": "What is the difference between HTML, CSS and JavaScript?",
              "answer": "HTML is the structure of a webpage. CSS is the style of a webpage. JavaScript is the programming of a webpage."
            },
            {
              "question": "What is an HTML tag?",
              "answer": "An HTML tag is a code that is used to tell a web browser how to display the content of a web page."
            },
            {
              "question": "What are the three parts of an HTML element?",
              "answer": "The three parts of an HTML element are the start tag, the content, and the end tag."
            },
            {
              "question": "What is the purpose of the doctype declaration?",
              "answer": "The doctype declaration is used to specify the document type for the HTML document."
            },
            {
              "question": "What is the HTML element?",
              "answer": "The HTML element is the root element of an HTML document."
            },
            {
              "question": "What is the purpose of the head element?",
              "answer": "The head element is used to specify information about the document, such as the document's title, character encoding, and style sheets."
            },
            {
              "question": "What is the purpose of the body element?",
              "answer": "The body element contains all the contents of an HTML document, such as text, hyperlinks, images, tables, lists, etc."
            },
            {
              "question": "How do you create a paragraph in HTML?",
              "answer": "To create a paragraph in HTML, you use the <p> element. The <p> element represents a paragraph of text."
            },
            {
              "question": "How do you create a heading in HTML?",
              "answer": "To create a heading in HTML, use the tag. The heading tag defines the heading of a section. The heading tag is a block-level element."
            },
            {
              "question": "How many different levels of headings are there and what is the difference between them?",
              "answer": "There are six different levels of headings. The first level is the largest and the sixth level is the smallest. The difference between them is the size of the font and the amount of space between the lines."
            },
            {
              "question": "What element should you use to make text bold and important?",
              "answer": "The element you should use to make text bold and important is the <strong> tag."
            },
            {
              "question": "What element should you use to make text italicized to add emphasis to it?",
              "answer": "The <em> element is used to make text italicized to add emphasis to it."
            },
            {
              "question": "What relationship does an element have with any nested elements within it?",
              "answer": "An element has a parent-child relationship with any nested elements within it."
            },
            {
              "question": "What relationship do two elements have if they are at the same level of nesting?",
              "answer": "The two elements are siblings."
            },
            {
              "question": "How do you create HTML comments?",
              "answer": "To create an HTML comment, use the <!--  --> syntax."
            },
            {
              "question": "What HTML element is used to create an unordered list?",
              "answer": "The HTML element used to create an unordered list is the <ul> element."
            },
            {
              "question": "What HTML element is used to create an ordered list?",
              "answer": "The HTML element used to create an ordered list is the <ol> element."
            },
            {
              "question": "What HTML element is used to create list items within both unordered and ordered lists?",
              "answer": "<li>"
            },
            {
              "question": "What element is used to create a link?",
              "answer": "The element used to create a link is the <a> element."
            },
            {
              "question": "What is an attribute?",
              "answer": "An attribute is a characteristic or quality of something."
            },
            {
              "question": "What attribute tells links where to go to?",
              "answer": "The 'href' attribute tells links where to go to."
            },
            {
              "question": "What security considerations must be taken if you wish to use the target attribute to open links in a new tab/window?",
              "answer": "When using the target attribute to open links in a new tab/window, the following security considerations must be taken: -The target attribute should only be used if the link is to an external site; -The target attribute should not be used if the link is to an internal page on the same site; -The target attribute should not be used if the link is to a file that is not part of the site."
            },
            {
              "question": "What is the difference between an absolute and relative link?",
              "answer": "An absolute link is a link that includes the entire URL to the linked page. A relative link is a link that only includes part of the URL to the linked page."
            },
            {
              "question": "Which element is used to display an image?",
              "answer": "The element is used to display an image."
            },
            {
              "question": "What two attributes do images always need to have?",
              "answer": "Images always need to have a width and a height."
            },
            {
              "question": "How do you access a parent directory in a filepath?",
              "answer": "You can access a parent directory in a filepath by using the '..' notation. For example, if you are in the /home/user/Documents directory, you can use the command 'cd ..' to change to the /home/user directory."
            },
            {
              "question": "What are the four main image formats that you can use for images on the web?",
              "answer": "The four main image formats that you can use for images on the web are JPEG, PNG, GIF, and SVG."
            },
            {
              "question": "What are two benefits of having well-written commit messages and a good commit history?",
              "answer": "1. Well-written commit messages can help developers quickly understand the purpose of a commit and the changes it introduced. 2. A good commit history can be helpful when debugging issues or trying to understand the evolution of a codebase."
            },
            {
              "question": "How many characters should the subject line of your commit message be?",
              "answer": "The subject line of your commit message should be 50 characters or less."
            }
          ]
        },
        {
          "title": "CSS Foundations",
          "flashcards": [
            {
              "question": "What is the syntax for class and ID selectors?",
              "answer": "The syntax for class selectors is \".class\". The syntax for ID selectors is \"#id\"."
            },
            {
              "question": "How would you apply a single rule to two different selectors?",
              "answer": "You can apply a single rule to two different selectors by using a comma to separate the selectors."
            },
            {
              "question": "Given an element that has an id of title and a class of primary, how would you use both attributes for a single rule?",
              "answer": "#title.primary { }"
            },
            {
              "question": "What does the descendant combinator do?",
              "answer": "The descendant combinator is used to select elements that are descendants of other elements in the document tree."
            },
            {
              "question": "What are the names of the three ways to add CSS to HTML?",
              "answer": "There are three ways to add CSS to HTML: 1. Inline CSS 2. Embedded CSS 3. External CSS"
            },
            {
              "question": "What are the main differences between the three ways of adding CSS to HTML?",
              "answer": "The main differences between the three ways of adding CSS to HTML are: 1. Inline CSS is added to HTML elements using the style attribute. 2. Internal CSS is added to the <head> section of an HTML document. 3. External CSS is added to HTML documents using the <link> element."
            },
            {
              "question": "Between a rule that uses one class selector and a rule that uses three type selectors, which rule has the higher specificity?",
              "answer": "A rule that uses three type selectors has a higher specificity than a rule that uses one class selector."
            },
            {
              "question": "How do you select a specific element on your page with your browser’s developer tools?",
              "answer": "In order to select a specific element on your page with your browser's developer tools, you will need to first open the developer tools. Once the developer tools are open, you can then select the element you would like to inspect by clicking on it."
            },
            {
              "question": "What does a strikethrough in a CSS declaration mean in your browser’s developer tools?",
              "answer": "A strikethrough in a CSS declaration means that the CSS rule is being overridden by another rule."
            },
            {
              "question": "How do you change CSS in real time on specific elements of a web page with your browser’s developer tools?",
              "answer": "To change CSS in real time on specific elements of a web page with your browser’s developer tools, you can use the browser’s built-in inspector tool."
            },
            {
              "question": "From inside to outside, what is the order of box-model properties?",
              "answer": "The order of box-model properties is as follows: content, padding, border, margin."
            },
            {
              "question": "What does the box-sizing CSS property do?",
              "answer": "The box-sizing CSS property defines how the user agent should calculate the total width and height of an element."
            },
            {
              "question": "What is the difference between the standard and alternative box model?",
              "answer": "The standard box model is the default box model used in CSS. It includes the content, padding, border, and margin. The alternative box model includes only the content and padding, and does not include the border and margin."
            },
            {
              "question": "Would you use margin or padding to create more space between 2 elements?",
              "answer": "You would use margin to create more space between 2 elements."
            },
            {
              "question": "Would you use margin or padding to create more space between the contents of an element and its border?",
              "answer": "You would use padding."
            },
            {
              "question": "Would you use margin or padding if you wanted two elements to overlap each other?",
              "answer": "If you wanted two elements to overlap each other, you would use the CSS property \"position: absolute;\" for one of the elements."
            },
            {
              "question": "How do you set the alternative box model for all of your elements?",
              "answer": "The alternative box model can be set for all elements by using the CSS3 box-sizing property. This property can be set to one of two values: border-box or content-box. The default value is content-box."
            },
            {
              "question": "How do you center an element horizontally?",
              "answer": "The easiest way to center an element horizontally is to set the style property \"margin\" to \"auto\". This will split the available space evenly between the left and right margins, effectively centering the element."
            },
            {
              "question": "What is the difference between a block element and an inline element?",
              "answer": "A block element is an element that takes up the entire width of the page and is typically placed on its own line. An inline element is an element that only takes up as much width as it needs and can be placed on the same line as other elements."
            },
            {
              "question": "What is the difference between an inline element and an inline-block element?",
              "answer": "An inline element is an element that can be used inline with other content. An inline-block element is an element that can be used inline with other content, but that also has a block-level element's characteristics."
            },
            {
              "question": "Is an h1 block or inline?",
              "answer": "An h1 is a block level element."
            },
            {
              "question": "Is button block or inline?",
              "answer": "Button elements are inline elements by default, but block elements can be used by setting the display property to block."
            },
            {
              "question": "Is div block or inline?",
              "answer": "A div is a block element."
            },
            {
              "question": "Is span block or inline?",
              "answer": "Span elements are inline elements by default."
            }
          ]
        },
        {
          "title": "Flexbox",
          "flashcards": [
            {
              "question": "What’s the difference between a flex container and a flex item?",
              "answer": "A flex container is an element that has the display property set to flex or inline-flex. Flex items are the children of a flex container. They are the elements that are aligned and laid out using the flexbox model."
            },
            {
              "question": "How do you create a flex item?",
              "answer": "A flex item is an element within a flex container."
            },
            {
              "question": "What are the 3 values defined in the shorthand flex property (e.g. flex: 1 1 auto)?",
              "answer": "The three values defined in the shorthand flex property are: 1. The flex-grow value 2. The flex-shrink value 3. The flex-basis value."
            },
            {
              "question": "What are the 3 defined values for the flex shorthand flex:auto?",
              "answer": "The flex shorthand flex:auto defines the flex grow factor, flex shrink factor, and flex basis."
            },
            {
              "question": "How do you make flex items arrange themselves vertically instead of horizontally?",
              "answer": "To make flex items arrange themselves vertically instead of horizontally, you can use the flex-direction property with a value of column."
            },
            {
              "question": "In a column flex-container, what does flex-basis refer to?",
              "answer": "Flex-basis refers to the initial size of a flex item."
            },
            {
              "question": "In a row flex-container, what does flex-basis refer to?",
              "answer": "Flex-basis refers to the size of the content area of a flex item."
            },
            {
              "question": "Why do the previous two questions have different answers?",
              "answer": "The first question asks for the value of the expression 2 + 3 * 4. The answer is 14 because the order of operations dictates that the 3 * 4 should be done first, and then the 2 should be added to that. The second question asks for the value of the expression (2 + 3) * 4. The answer is 20 because the parentheses dictate that the 2 + 3 should be done first, and then the 4 should be multiplied by that."
            },
            {
              "question": "What is the difference between justify-content and align-items?",
              "answer": "The justify-content property is used to align items horizontally, while the align-items property is used to align items vertically."
            },
            {
              "question": "How do you use flexbox to completely center a div inside a flex container?",
              "answer": "To center a div inside a flex container, you can use the align-items property with a value of center."
            },
            {
              "question": "What’s the difference between justify-content: space-between and justify-content: space-around?",
              "answer": "The main difference between the two is that space-between will put an equal amount of space on either end of the flex container, while space-around will put an equal amount of space around all flex items."
            }
          ]
        },
        {
          "title": "JavaScript Basics",
          "flashcards": [
            {
              "question": "Name the three ways to declare a variable",
              "answer": "There are three ways to declare a variable in JavaScript: var myVariable = 'some value'; let myVariable = 'some value'; const myVariable = 'some value';"
            },
            {
              "question": "Which of the three variable declarations should you avoid and why?",
              "answer": "The third variable declaration should be avoided because it is not necessary to declare the variable again inside the for loop."
            },
            {
              "question": "What rules should you follow when naming variables?",
              "answer": "There are a few basic rules you should follow when naming variables: 1. Use descriptive names that make it easy to understand the purpose of the variable. 2. Avoid using names that are too long or too short. 3. Avoid using names that are similar to other variable names. 4. Use a consistent naming convention throughout your code."
            },
            {
              "question": "What happens when you add numbers and strings together?",
              "answer": "If you add a number and a string together, the result is a string."
            },
            {
              "question": "How does the Modulo (%), or Remainder, operator work?",
              "answer": "The Modulo, or Remainder, operator returns the remainder of two numbers after division."
            },
            {
              "question": "Explain the difference between == and ===.",
              "answer": "The == operator checks whether the two operands are equal in value. The === operator checks whether the two operands are equal in value and type."
            },
            {
              "question": "When would you receive a NaN result?",
              "answer": "If you divide 0 by 0, you would receive a NaN result."
            },
            {
              "question": "How do you increment and decrement a number?",
              "answer": "To increment a number, you add one to it. To decrement a number, you subtract one from it."
            },
            {
              "question": "Explain the difference between prefixing and postfixing increment/decrement operators.",
              "answer": "Prefixing increment/decrement operators increase or decrease the value of a variable by 1 before the rest of the code in the line is executed. Postfixing increment/decrement operators increase or decrease the value of a variable by 1 after the rest of the code in the line is executed."
            },
            {
              "question": "What is operator precedence and how is it handled in JS?",
              "answer": "Operator precedence is the order in which operators are evaluated when they are used in an expression. In JS, operators with higher precedence are evaluated before operators with lower precedence."
            },
            {
              "question": "How do you access developer tools and the console?",
              "answer": "To access the developer tools, right-click on any element on a web page and select 'Inspect' or 'Inspect Element'. This will open the developer tools. To access the console, open the developer tools and select the 'Console' tab."
            },
            {
              "question": "How do you log information to the console?",
              "answer": "The console.log() method is used to log information to the console."
            },
            {
              "question": "What does unary plus operator do to string representations of integers? eg. +”10”",
              "answer": "The unary plus operator doesn't do anything to string representations of integers."
            },
            {
              "question": "Which data type is NOT primitive?",
              "answer": "The Object data type is not primitive."
            },
            {
              "question": "What is the relationship between null and undefined?",
              "answer": "Null and undefined both represent the absence of a value. However, null is explicitly given a value of null, while undefined is not given a value at all."
            },
            {
              "question": "What is the difference between single, double, and backtick quotes for strings?",
              "answer": "The difference between single, double, and backtick quotes for strings is that single quotes denote a literal string value, double quotes allow for variable interpolation, and backticks allow for command substitution."
            },
            {
              "question": "What is the term for joining strings together?",
              "answer": "The term for joining strings together is concatenation."
            },
            {
              "question": "Which type of quote lets you embed variables/expressions in a string?",
              "answer": "A template literal."
            },
            {
              "question": "How do you embed variables/expressions in a string?",
              "answer": "Use string interpolation: 'The value of x is #{x}'"
            },
            {
              "question": "How do you use escape characters in a string?",
              "answer": "Escape characters are used to signal an alternative interpretation of a character. For example, a new line character could be represented as \\r\\n."
            },
            {
              "question": "What is the difference between the slice/substring/substr string methods?",
              "answer": "The slice method returns a copy of a portion of a string. The substring method returns a copy of a portion of a string. The substr method returns a copy of a portion of a string."
            },
            {
              "question": "What are the three logical operators and what do they stand for?",
              "answer": "The three logical operators are 'and', 'or', and 'not'. They stand for logical conjunction, logical disjunction, and negation respectively."
            },
            {
              "question": "What are the comparison operators?",
              "answer": "The comparison operators are the operators that are used to compare two values. The comparison operators are: > Greater than < Less than >= Greater than or equal to <= Less than or equal to == Equal to != Not equal to"
            },
            {
              "question": "What are truthy and falsy values?",
              "answer": "Truthy values are values that evaluate to true in a boolean context. Falsy values are values that evaluate to false in a boolean context."
            },
            {
              "question": "What are the falsy values in JavaScript?",
              "answer": "The falsy values in JavaScript are false, 0, '', null, undefined, and NaN."
            },
            {
              "question": "What are conditionals?",
              "answer": "Conditionals are blocks of code that only run if a certain condition is true."
            },
            {
              "question": "What is the syntax for an if/else conditional?",
              "answer": "The syntax for an if/else conditional is: if (condition) { // code to execute if condition is true } else { // code to execute if condition is false }"
            },
            {
              "question": "What is the syntax for a switch statement?",
              "answer": "switch (expression) { case value1: // Statements executed when the result of expression matches value1 break; case value2: // Statements executed when the result of expression matches value2 break; // ... default: // Statements executed when none of the values match the value of the expression }"
            },
            {
              "question": "What is the syntax for a ternary operator?",
              "answer": "The syntax for a ternary operator is: condition ? expression1 : expression2"
            },
            {
              "question": "What is nesting?",
              "answer": "Nesting is a programming technique in which data or code is placed inside another data structure or code."
            },
            {
              "question": "How do you open developer tools?",
              "answer": "There are a few ways to open the developer tools: 1. Press F12. 2. Press Ctrl+Shift+I. 3. Right-click on an element on the page and select 'Inspect element'."
            },
            {
              "question": "How do you change screen size of a website using developer tools?",
              "answer": "Open the developer tools in your browser, then go to the 'Settings' tab. Under the 'General' tab, you will see a 'Screen Size' option. You can change the width and height of your screen here."
            },
            {
              "question": "What is a breakpoint?",
              "answer": "A breakpoint is a line of code where the debugger will stop when executing a program. This allows the programmer to examine the program's state to see what is causing an error."
            },
            {
              "question": "How do you set a breakpoint?",
              "answer": "A breakpoint is set by clicking on the line number where you want the breakpoint to be set."
            },
            {
              "question": "What are functions useful for?",
              "answer": "Functions are useful for organizing code and making it more readable. They can also be used to reuse code."
            },
            {
              "question": "How do you invoke a function?",
              "answer": "A function can be invoked by calling it followed by parentheses. For example, if you have a function named 'myFunction', you would call it as myFunction(); You can Call the function using a function pointer: funcptr(); or Use the function as a callback: someOtherFunc(func);"
            },
            {
              "question": "What are anonymous functions?",
              "answer": "An anonymous function is a function that is not bound to a name."
            },
            {
              "question": "What is function scope?",
              "answer": "Function scope is the scope in which a function is defined. This scope is the function itself and all the variables declared within the function."
            },
            {
              "question": "What are return values?",
              "answer": "In computer programming, a return value is the result of a function or method."
            },
            {
              "question": "What are arrow functions?",
              "answer": "Arrow functions are a shorter way to write functions in JavaScript. They do not have their own this, arguments, super, or new.target."
            },
            {
              "question": "What are the three stages in the problem solving process?",
              "answer": "The three stages in the problem solving process are identifying the problem, developing a plan, and implementing the plan."
            },
            {
              "question": "Why is it important to clearly understand the problem first?",
              "answer": "If you do not understand the problem, you will not be able to solve it."
            },
            {
              "question": "What can you do to help get a clearer understanding of the problem?",
              "answer": "There are a few things you can do to help get a clearer understanding of the problem:\n\n-Talk to the person who reported the problem and get as much information as possible about what they experienced.\n\n-Talk to other people who may have witnessed the problem.\n\n-Look at any available evidence, such as logs, screenshots, or videos.\n\n-Try to reproduce the problem yourself."
            },
            {
              "question": "What are some of the things you should do in the planning stage of the problem solving process?",
              "answer": "Some things you should do in the planning stage of the problem solving process are:\n\n1. Define the problem\n2. Identify the goal\n3. Generate possible solutions\n4. Evaluate the possible solutions\n5. Choose the best solution\n6. Implement the solution\n7. Evaluate the results"
            },
            {
              "question": "What is an algorithm?",
              "answer": "An algorithm is a set of instructions that are followed in order to solve a problem."
            },
            {
              "question": "What is pseudocode?",
              "answer": "Pseudocode is a way of describing a computer program or algorithm in human-readable terms. It is not a programming language, but rather a way of representing a program's steps in a more logical, step-by-step fashion."
            },
            {
              "question": "What are the advantages of breaking a problem down and solving the smaller problems?",
              "answer": "There are several advantages to breaking a problem down and solving the smaller problems. First, it can make the problem seem more manageable. Second, it can help you to better understand the problem and how it can be solved. Third, it can help you to find a solution more quickly. Finally, it can help you to avoid making mistakes when solving the problem."
            },
            {
              "question": "What are three reasons why you may see a TypeError?",
              "answer": "A TypeError may be thrown for many reasons, but some of the most common are:\n\n1. Trying to use a variable that has not been assigned a value\n2. Trying to use a variable that has been assigned a value of the wrong type\n3. Trying to use a function that does not exist"
            },
            {
              "question": "What is the key difference between an error and a warning?",
              "answer": "An error is a message that indicates that the compiler cannot continue compiling the program. A warning is a message that indicates that there is something in the program that may not be what the programmer intended."
            },
            {
              "question": "What is one method you can use to resolve an error?",
              "answer": "One method you can use to resolve an error is to search for the error online."
            },
            {
              "question": "Why is it important to write clean code?",
              "answer": "There are many reasons why writing clean code is important. One reason is that it can make code easier to read and understand. This is especially important for other developers who may need to work on or maintain your code in the future. Additionally, clean code can help prevent errors and make code more reliable."
            },
            {
              "question": "Name 5 clean code principles previously mentioned",
              "answer": "1. Single Responsibility Principle\n2. Open/Closed Principle\n3. Liskov Substitution Principle\n4. Interface Segregation Principle\n5. Dependency Inversion Principle"
            },
            {
              "question": "What is the difference between good comments and bad comments?",
              "answer": "The difference between good comments and bad comments is that good comments are constructive and add to the discussion, while bad comments are unhelpful and do not contribute to the discussion."
            },
            {
              "question": "What is an array?",
              "answer": "An array is a data structure that stores a collection of elements of the same data type."
            },
            {
              "question": "What are arrays useful for?",
              "answer": "Arrays are useful for storing data in a structured way."
            },
            {
              "question": "How do you access an array element?",
              "answer": "There are various ways to access array elements in JavaScript:\n\n- Using the index number\n- Using the for loop\n- Using the forEach() method\n- Using the map() method\n- Using the filter() method\n- Using the reduce() method\n- Using the some() method\n- Using the every() method"
            },
            {
              "question": "How do you change an array element?",
              "answer": "To change an array element, you need to use the index number of the element you want to change. For example, if you want to change the first element in an array, you would use the index number 0."
            },
            {
              "question": "What are some useful array properties?",
              "answer": "Some useful array properties are the length property, which returns the number of elements in the array, and the indexOf() method, which returns the first index at which a given element can be found in the array."
            },
            {
              "question": "What are some useful array methods?",
              "answer": "Some useful array methods are:\n\n- push(): Add one or more elements to the end of an array and return the new length of the array.\n- pop(): Remove the last element from an array and return that element.\n- shift(): Remove the first element from an array and return that element.\n- unshift(): Add one or more elements to the beginning of an array and return the new length of the array.\n- splice(): Remove elements from an array and/or add new elements.\n- concat(): Join two or more arrays and return a new array.\n- slice(): Select a part of an array and return a new array.\n- forEach(): Execute a function for each"
            },
            {
              "question": "What are loops useful for?",
              "answer": "Loops are useful for repeating a set of instructions until a specific condition is met."
            },
            {
              "question": "What is the break statement?",
              "answer": "The break statement terminates the loop body and transfers execution to the statement following the loop."
            },
            {
              "question": "What is the continue statement?",
              "answer": "The continue statement is used to continue to the next iteration of a loop."
            },
            {
              "question": "What is the advantage of writing automated tests?",
              "answer": "The advantage of writing automated tests is that they can be run quickly and often, with little effort on the part of the tester. Automated tests can also be run in a variety of environments, including those that are not conducive to manual testing."
            },
            {
              "question": "What is the DOM?",
              "answer": "The DOM is a tree-like structure that represents the HTML document. It is used to access and modify the document."
            },
            {
              "question": "How do you target the nodes you want to work with?",
              "answer": "There are a few ways to target nodes:\n\n- By using a CSS selector\n- By using the `getElementById` function\n- By using the `getElementsByClassName` function\n- By using the `getElementsByTagName` function"
            },
            {
              "question": "How do you create an element in the DOM?",
              "answer": "There are various ways to create an element in the DOM. One way is to use the document.createElement() method. This method requires one parameter, which is the name of the element you wish to create."
            },
            {
              "question": "How do you add an element to the DOM?",
              "answer": "There are various ways to add an element to the DOM. One way is to use the appendChild() method to append a new child node to an existing element. Another way is to use the insertBefore() method to insert a new child node before an existing child node."
            },
            {
              "question": "How do you remove an element from the DOM?",
              "answer": "There are several ways to remove an element from the DOM, depending on whether you want to remove the element itself, or just its contents.\n\nTo remove an element from the DOM, you can use the removeChild() method. This method removes a child element from an element.\n\nTo remove just the contents of an element, you can use the innerHTML property."
            },
            {
              "question": "How can you alter an element in the DOM?",
              "answer": "You can use the `.setAttribute()` method to change an attribute of an element in the DOM."
            },
            {
              "question": "When adding text to a DOM element, should you use textContent or innerHTML? Why?",
              "answer": "You should use textContent because it will not parse the string as HTML."
            },
            {
              "question": "Where should you include your JavaScript tag in your HTML file when working with DOM nodes?",
              "answer": "The JavaScript tag should be included in the HTML file before any DOM nodes are created."
            },
            {
              "question": "How do 'events' and 'listeners' work?",
              "answer": "Events are a way to trigger a function when something happens. Listeners are a way to trigger a function when an event happens."
            },
            {
              "question": "What are three ways to use events in your code?",
              "answer": "1. You can use events to trigger a function when a user clicks a button.\n2. You can use events to trigger a function when a user hovers over an element.\n3. You can use events to trigger a function when a user scrolls down the page."
            },
            {
              "question": "Why are event listeners the preferred way to handle events?",
              "answer": "Event listeners are the preferred way to handle events because they allow you to add or remove event handlers at any time, and they don't require you to add extra HTML to your page."
            },
            {
              "question": "What are the benefits of using named functions in your listeners?",
              "answer": "There are several benefits to using named functions in your listeners:\n\n1. It makes your code more readable.\n\n2. It makes your code easier to debug.\n\n3. It makes it easier to add new features or change existing ones.\n\n4. It makes your code more maintainable."
            },
            {
              "question": "How do you attach listeners to groups of nodes?",
              "answer": "You can attach listeners to groups of nodes by using the addEventListener() method."
            },
            {
              "question": "What is the difference between the return values of querySelector and querySelectorAll?",
              "answer": "querySelector returns the first element that matches the given CSS selector. querySelectorAll returns all elements that match the given CSS selector."
            },
            {
              "question": "What does a 'nodelist' contain?",
              "answer": "A nodelist is a collection of nodes."
            },
            {
              "question": "Explain the difference between 'capture' and 'bubbling'.",
              "answer": "The difference between 'capture' and 'bubbling' is that 'capture' happens first and 'bubbling' happens afterwards. 'Capture' happens when the event is first fired on the target element, and then it moves up the DOM tree to the parent elements. 'Bubbling' happens when the event is first fired on the target element, and then it moves down the DOM tree to the child elements."
            },
            {
              "question": "What is the difference between objects and arrays?",
              "answer": "An object is a data type that stores a collection of properties. An array is a data type that stores a collection of values."
            },
            {
              "question": "How do you access object properties?",
              "answer": "To access object properties, you use the dot notation."
            },
            {
              "question": "What is Array.prototype.map() useful for?",
              "answer": "The Array.prototype.map() method is useful for creating a new array from the results of a callback function."
            },
            {
              "question": "What is Array.prototype.reduce() useful for?",
              "answer": "The Array.prototype.reduce() method is useful for reducing an array to a single value."
            }
          ]
        }
      ]
    },
    {
      "title": "Intermediate HTML and CSS",
      "lessons": [
        {
          "title": "Intermediate HTML Concepts",
          "flashcards": [
            {
              "question": "Why should you use Emmet?",
              "answer": "Emmet is a great tool for quickly creating HTML and CSS code. It can help you save time by automatically creating code for you, and it can also help you avoid mistakes by automatically checking your code for errors."
            },
            {
              "question": "What are some useful Emmet abbreviations?",
              "answer": "Emmet abbreviations are most useful for HTML and CSS code. Some common Emmet abbreviations are:\n\nhtml:5 - Creates an HTML5 document skeleton\n\nhead - Creates a head element\n\ntitle - Creates a title element\n\nmeta - Creates a meta element\n\nlink - Creates a link element\n\nscript - Creates a script element\n\nstyle - Creates a style element\n\nbody - Creates a body element\n\nheader - Creates a header element\n\nnav - Creates a nav element\n\nmain - Creates a main element\n\nsection - Creates a section element\n\narticle - Creates an article element\n\naside -"
            },
            {
              "question": "What syntax would you use to create this element <p class='text'></p>?",
              "answer": "<p class='text'></p>"
            },
            {
              "question": "What syntax expands to an element with a child element inside of it? For example: <div><p></p></div>",
              "answer": "<div><p></p></div>"
            },
            {
              "question": "What syntax would you use to create three elements that have the same class name?",
              "answer": "<div class='same'></div>\n<div class='same'></div>\n<div class='same'></div>"
            },
            {
              "question": "What is the xmlns attribute?",
              "answer": "The xmlns attribute is used to declare a namespace."
            },
            {
              "question": "What are some situations where you wouldn’t want to use SVG?",
              "answer": "Some situations where you wouldn't want to use SVG include when you want support for older browsers, or when you want to create a complex animation."
            },
            {
              "question": "What are the benefits of “inlining” your SVGs? What are the drawbacks?",
              "answer": "Inlining SVGs can be beneficial because it allows you to style them with CSS and control them with JavaScript. It can also be beneficial because it can reduce the number of HTTP requests. However, inline SVGs can be difficult to maintain and can increase the size of your HTML document."
            },
            {
              "question": "What is a table?",
              "answer": "A table is a piece of furniture with a flat top and one or more legs, used as a surface for working at, eating from or on which to place things."
            },
            {
              "question": "Why is it a bad idea to use HTML Tables for page layout?",
              "answer": "It is a bad idea to use HTML Tables for page layout because they are not intended for that purpose. Tables are meant to be used to present tabular data, not to control the layout of a page. Using tables for page layout can lead to unexpected results and can make it difficult to maintain your page."
            },
            {
              "question": "What are caption elements useful for?",
              "answer": "Caption elements are useful for providing titles for sections of content, and for providing descriptions for images."
            },
            {
              "question": "What is the scope attribute?",
              "answer": "The scope attribute is an HTML element that determines the visibility and accessibility of variables and functions within a web page. The scope attribute can have one of three values: global, local, or isolated. Global scope means that the variable or function is visible and accessible from anywhere within the web page. Local scope means that the variable or function is only visible and accessible from within the same HTML element. Isolated scope means that the variable or function is only visible and accessible from within the same JavaScript file."
            }
          ]
        },
        {
          "title": "Intermediate CSS Concepts",
          "flashcards": [
            {
              "question": "Why would you want to use a CSS reset?",
              "answer": "A CSS reset is a way to force browsers to render all elements consistently. Each browser has its own default styles for how elements should be displayed, and these can vary significantly. A CSS reset removes these default styles, providing a level playing field to work from."
            },
            {
              "question": "Why would you want to use em or rem for font-size instead of px?",
              "answer": "There are a few reasons why you might want to use em or rem for font-size instead of px: \n\n1. Em and rem are relative units, so they can scale more easily than px. \n2. Em and rem are also better for accessibility, because they can be resized by the user. \n3. Finally, em and rem can be more consistent across browsers and devices."
            },
            {
              "question": "What are some instances where you might want to use vh and vw?",
              "answer": "Some instances where you might want to use vh and vw are when you want to set the width or height of an element to be a percentage of the viewport's width or height."
            },
            {
              "question": "What are some instances where you might want to use px instead of a relative unit?",
              "answer": "Some instances where you might want to use px instead of a relative unit are when you are working with images, when you want something to be a certain size no matter the screen size, or when you want something to have a fixed position."
            },
            {
              "question": "What are the 2 ways to add fonts that are not installed on a user’s computer?",
              "answer": "1. Use a web font service such as Google Fonts or Adobe Fonts.\n2. Use a font management tool to install the fonts on the user’s computer."
            },
            {
              "question": "What is the ‘system font stack’ and why would you want to use it?",
              "answer": "The system font stack is a set of fonts that are installed on a user's computer. These fonts are typically used by web browsers and operating systems. The system font stack allows web developers to specify a set of fonts that are likely to be available on a user's computer. This can be useful when trying to create a consistent experience across different devices and browsers."
            },
            {
              "question": "Which property would you use to increase or decrease the space between letters in a word?",
              "answer": "The property you would use to increase or decrease the space between letters in a word is the letter-spacing property."
            },
            {
              "question": "Which property would you use to increase or decrease the space between lines in a paragraph?",
              "answer": "line-height"
            },
            {
              "question": "Which property would you use to make an element transparent?",
              "answer": "The opacity property."
            },
            {
              "question": "Which property would you use to make a background image tile?",
              "answer": "The background-repeat property."
            },
            {
              "question": "Which property would you use to add scrollbars to an element?",
              "answer": "The overflow property."
            },
            {
              "question": "Which property would you use to add a shadow behind an element?",
              "answer": "The box-shadow property is used to add a shadow behind an element."
            },
            {
              "question": "Which property would you use to create rounded corners on an element?",
              "answer": "The border-radius property."
            },
            {
              "question": "How would you use border-radius to make a circular element?",
              "answer": "You would use border-radius to make a circular element by setting the border-radius property to 50%."
            },
            {
              "question": "What is the difference between the child combinator and the descendant combinator?",
              "answer": "The child combinator is used to select only immediate children of an element, while the descendant combinator is used to select all children of an element, including grandchildren, great-grandchildren, and so on."
            },
            {
              "question": "How does the syntax of pseudo-classes and pseudo-elements differ?",
              "answer": "Pseudo-classes are used to select elements based on their state, while pseudo-elements are used to select and style specific parts of an element."
            },
            {
              "question": "Do pseudo-classes exist somewhere in HTML? Do pseudo-elements?",
              "answer": "Pseudo-classes and pseudo-elements do not exist in HTML."
            },
            {
              "question": "Name two ways you could select every second child of an element, starting with the first.",
              "answer": "1. nth-child(2n)\n2. nth-child(odd)"
            },
            {
              "question": "What is the difference between div:first-child and div:last-child? What will each select?",
              "answer": "The difference between div:first-child and div:last-child is that div:first-child will select the first child element of a parent element, while div:last-child will select the last child element of a parent element."
            },
            {
              "question": "What selector would you use to style a button a user is currently hovering over? How about one that is currently being clicked on?",
              "answer": "The selector you would use to style a button a user is currently hovering over is `:hover`. The selector you would use to style a button a user is currently clicking on is `:active`."
            },
            {
              "question": "How could you select all input elements with a type of text?",
              "answer": "$(\"input[type=text]\")"
            },
            {
              "question": "How could you select all classes that begin with thunder?",
              "answer": ".thunder"
            },
            {
              "question": "What is the difference between static and relative positioning?",
              "answer": "Static positioning is when an element is positioned according to the normal flow of the document. Relative positioning is when an element is positioned relative to its normal position."
            },
            {
              "question": "What is absolute positioning useful for?",
              "answer": "Absolute positioning is useful for creating unique layouts without having to worry about the normal flow of the document."
            },
            {
              "question": "What is the difference between fixed and sticky positioning?",
              "answer": "Fixed positioning is when an element is positioned relative to the viewport, or the browser window itself. This means that, no matter where you scroll, the element will stay in the same place. Sticky positioning is when an element is positioned relative to the viewport, but it will scroll with the rest of the page. So, if you scroll down, the element will scroll down with the page, until it reaches the end of the page, at which point it will become fixed in place."
            },
            {
              "question": "What are the four CSS math functions we covered above?",
              "answer": "add, subtract, multiply, divide"
            },
            {
              "question": "How do we use CSS math functions in our CSS?",
              "answer": "We can use the calc() function to perform mathematical operations on CSS values. For example, we could use it to calculate the width of an element as a percentage of the width of its parent element:\n\n.element {\n  width: calc(100% / 3);\n}"
            },
            {
              "question": "How can CSS functions help make websites and applications more responsive?",
              "answer": "CSS functions can help make websites and applications more responsive by allowing for the creation of responsive layouts. This means that the website or application will adapt to the size of the screen it is being viewed on, whether that is a desktop, tablet, or mobile device. This is important because it ensures that users will have a good experience no matter how they are accessing the site or application."
            },
            {
              "question": "How would you declare a custom property with a name of text-color?",
              "answer": "text-color: #000;"
            },
            {
              "question": "How would you access a custom property with a name of background-color?",
              "answer": "You would access a custom property with a name of background-color by using the syntax --background-color."
            },
            {
              "question": "Where would you declare a custom property to have its scope be global and accessible by all other selectors?",
              "answer": "A custom property can be declared globally by using the :root selector."
            },
            {
              "question": "Where would you declare a custom property so that a user’s theme setting from their OS or browser was taken into account?",
              "answer": "The best place to declare a custom property so that a user's theme setting from their OS or browser was taken into account would be in the global stylesheet."
            },
            {
              "question": "What is the most used browser currently?",
              "answer": "The most used browser is Google Chrome."
            },
            {
              "question": "What was the original name of the first web browser?",
              "answer": "The first web browser was originally named Mosaic."
            },
            {
              "question": "How are mobile browsers different on Apple mobile operating systems from Android?",
              "answer": "The main difference between mobile browsers on Apple mobile operating systems and Android is that Apple mobile operating systems use the Safari browser while Android uses the Google Chrome browser."
            },
            {
              "question": "What are some advantages of using a CSS framework?",
              "answer": "Some advantages of using a CSS framework are that it can provide a basic structure for your CSS, which can save time and be helpful if you are not a experienced CSS developer. CSS frameworks can also help keep your code organized and can make it easier to create responsive designs."
            },
            {
              "question": "What are some disadvantages of using a CSS framework?",
              "answer": "A CSS framework is a pre-prepared library that is meant to allow for easier, more standards-compliant styling of web pages using the Cascading Style Sheets language. A CSS framework typically provides a basic structure with common web page elements, such as a grid system, and basic CSS styling. A CSS framework can save time and provide consistency in a web development project, but it can also be inflexible and add unnecessary code bloat. A CSS framework can also make it more difficult to learn CSS, as it can provide a false sense of understanding of how CSS works."
            },
            {
              "question": "What are some advantages of using a CSS preprocessor?",
              "answer": "Preprocessors can make CSS more maintainable, DRY, and can provide variables, mixins, and other features that are not available in CSS."
            },
            {
              "question": "What are some disadvantages of using a CSS preprocessor?",
              "answer": "Some disadvantages of using a CSS preprocessor are that it can be difficult to debug errors, and it can also be difficult to maintain large projects."
            }
          ]
        },
        {
          "title": "Forms",
          "flashcards": [
            {
              "question": "Explain what the form element is for and what two attributes it should always include.",
              "answer": "The form element is used to create a form that can be submitted to a server for processing. The form should always include the action and method attributes."
            },
            {
              "question": "Explain what form controls are at a high level.",
              "answer": "Form controls are the input elements that allow users to interact with a web form. They can be used to enter data, select options, submit forms, and more."
            },
            {
              "question": "What is the name attribute for?",
              "answer": "The name attribute is for specifying the name of an element."
            },
            {
              "question": "What are the three most common form controls you can use for allowing users to select predefined options?",
              "answer": "The three most common form controls you can use for allowing users to select predefined options are radio buttons, checkboxes, and drop-down menus."
            },
            {
              "question": "What are the three types of buttons in HTML?",
              "answer": "There are three types of buttons in HTML: input type='button', input type='submit', and input type='reset'."
            },
            {
              "question": "What are the two most challenging aspects of styling forms?",
              "answer": "1. Ensuring that the form is accessible to all users, including those with disabilities. 2. Making sure the form is easy to use and understand."
            },
            {
              "question": "What does the required validation do?",
              "answer": "The required validation ensures that a value is provided for a field before the form can be submitted."
            },
            {
              "question": "What validations can you use for checking text length?",
              "answer": "The most common validation for checking text length is the min and maxlength attributes."
            },
            {
              "question": "How can you validate the minimum and maximum of numeric inputs?",
              "answer": "The minimum and maximum of numeric inputs can be validated by using the min and max attributes."
            },
            {
              "question": "What can you use the pattern validation for?",
              "answer": "The pattern validation can be used for a variety of purposes, such as validating data input, verifying that a given input is in the correct format, or checking that a given input conforms to a specific pattern."
            },
            {
              "question": "What pseudo CSS selectors are available for styling valid and invalid inputs?",
              "answer": "The :valid and :invalid pseudo CSS selectors are available for styling valid and invalid inputs."
            }
          ]
        },
        {
          "title": "Grid",
          "flashcards": [
            {
              "question": "How can you use Flex to make a two-dimensional layout?",
              "answer": "Flex can be used to make a two-dimensional layout by using the flex-direction property."
            },
            {
              "question": "Why was CSS Grid introduced?",
              "answer": "CSS Grid was introduced to provide a more efficient way to lay out content on a web page. It is a two-dimensional grid system that allows for more flexibility and control over how content is displayed on a page."
            },
            {
              "question": "Which CSS layout module would you use to easily make equal sized items in a container?",
              "answer": "The flexbox layout module."
            },
            {
              "question": "How does an HTML element become a grid item?",
              "answer": "An HTML element can become a grid item by setting the display property to grid or inline-grid."
            },
            {
              "question": "What is the space between lines on the grid?",
              "answer": "The space between lines on the grid is called a line space."
            },
            {
              "question": "How do you set gutters (also known as alleys) in the grid?",
              "answer": "In the grid, gutters are set by adding padding to the grid item."
            },
            {
              "question": "Describe what happens when you have more content than defined tracks.",
              "answer": "If you have more content than defined tracks, the extra content will not be played."
            },
            {
              "question": "How could you change the size for those undefined tracks?",
              "answer": "There is no way to change the size for undefined tracks."
            },
            {
              "question": "Explain the difference between a track and a line.",
              "answer": "A track is a path that is used regularly by vehicles or other moving objects, while a line is a path that is not regularly used."
            },
            {
              "question": "What is the smallest unit on a grid?",
              "answer": "The smallest unit on a grid is one square."
            },
            {
              "question": "What kind of value do we give to the grid-column-start or grid-column-end properties?",
              "answer": "We give a numeric value to the grid-column-start or grid-column-end properties."
            },
            {
              "question": "Which property can we use to combine all the start and end values for a grid item?",
              "answer": "The grid-column property can be used to combine all the start and end values for a grid item."
            },
            {
              "question": "Which grid container property can map out a visual structure of grid items?",
              "answer": "grid-template-columns"
            },
            {
              "question": "How do you create several grid tracks of the same size without manually typing each one out?",
              "answer": "You can use the CSS repeat function to create several grid tracks of the same size without manually typing each one out."
            },
            {
              "question": "What is the difference between a static and dynamic size value?",
              "answer": "A static size value is one that is set at compile time and cannot be changed. A dynamic size value is one that can be changed at runtime."
            },
            {
              "question": "How can you assign a grid track a flexible value that changes depending on the remaining space available in the grid?",
              "answer": "The grid track can be assigned a flexible value by using the min-content, max-content, or auto keyword."
            },
            {
              "question": "How can you assign grid tracks an uneven distribution of the remaining space in a grid?",
              "answer": "You can use the 'fr' unit, which represents a fraction of the remaining space in the grid."
            },
            {
              "question": "Which CSS functions will return the smallest or largest value supplied to them?",
              "answer": "The min() and max() functions will return the smallest and largest values, respectively, supplied to them."
            },
            {
              "question": "Which CSS Grid-only function allows you to supply a minimum and maximum track size that is calculated in realtime?",
              "answer": "minmax()"
            },
            {
              "question": "Which global CSS function allows you to supply a minimum, ideal, and maximum value that is calculated in realtime?",
              "answer": "The calc() function allows you to supply a minimum, ideal, and maximum value that is calculated in realtime."
            },
            {
              "question": "What attribute of repeat() can be used to fill in as many grid tracks as possible, given certain constraints?",
              "answer": "The max-content value."
            },
            {
              "question": "What is the difference between auto-fit and auto-fill?",
              "answer": "Auto-fit automatically adjusts the width or height of an element to fit the dimensions of its parent container. Auto-fill automatically fills the width or height of an element based on the size of its content."
            },
            {
              "question": "When might you use Flexbox over Grid?",
              "answer": "Flexbox is used for one-dimensional layouts, while Grid is used for two-dimensional layouts."
            },
            {
              "question": "When might you use Grid over Flexbox?",
              "answer": "You might use Grid over Flexbox when you are working with two-dimensional layouts."
            },
            {
              "question": "When might you use the two of these tools together?",
              "answer": "You might use Grid and Flexbox together when you want to create a complex layout, where the overall structure is defined by Grid, and Flexbox is used for smaller-scale layouts within the Grid."
            }
          ]
        }
      ]
    },
    {
      "title": "Javascript",
      "lessons": [
        {
          "title": "Organizing Your Javascript Code",
          "flashcards": [
            {
              "question": "Write an object constructor and instantiate the object.",
              "answer": "var Person = function(name, age) {\n    this.name = name;\n    this.age = age;\n}\n\nvar person1 = new Person(\"John\", 20);"
            },
            {
              "question": "Describe what a prototype is and how it can be used.",
              "answer": "A prototype is a preliminary model of something. It is often used to evaluate a concept or process."
            },
            {
              "question": "Explain prototypal inheritance.",
              "answer": "In prototypal inheritance, an object can inherit the properties of another object. The first object is called the prototype and the second object is called the child. The child object inherits all the properties of the prototype, including methods and variables."
            },
            {
              "question": "Understand the basic do’s and don’t’s of prototypical inheritance.",
              "answer": "In prototypical inheritance, objects inherit from other objects. The main thing to remember is that objects inherit from other objects, not from classes. \n\nHere are some basic do’s and don’ts: \n\nDo: \n\n- Use objects to inherit from other objects. \n- Make sure that the objects you want to inherit from have the same structure. \n- Use the prototype property to reference the object you want to inherit from. \n\nDon’t: \n\n- Use classes to inherit from other classes. \n- Use the prototype property to reference the object you want to inherit from."
            },
            {
              "question": "Explain what Object.create does.",
              "answer": "Object.create creates a new object with the specified prototype object and properties."
            },
            {
              "question": "How does this behave in different situations?",
              "answer": "This will behave differently in different situations depending on the context."
            },
            {
              "question": "Describe common bugs you might run into using constructors.",
              "answer": "-A constructor may be forget to initialize all instance variables \n-A constructor may initialize instance variables to invalid values \n-A constructor may invoke other methods that may throw exceptions \n-A constructor may fail to allocate enough memory"
            },
            {
              "question": "Write a factory method that returns an object.",
              "answer": "A factory method is a method that creates and returns an object. It is a static method that is invoked without an instance of the class. \n\npublic static Object createObject() {\n    return new Object();\n}"
            },
            {
              "question": "Explain how scope works in JavaScript (bonus points if you can point out what ES6 changed!).",
              "answer": "Scope in JavaScript determines the accessibility (visibility) of variables. There are two types of scope: global scope and local scope. Global scope is created when a variable is declared outside of a function. Local scope is created when a variable is declared inside a function. Variables declared in global scope are accessible everywhere in the program. Variables declared in local scope are only accessible inside the function where they are declared. \n\nES6 introduced the let keyword, which allows variables to be declared with block scope. This means that variables declared with let are only accessible inside the block where they are declared."
            },
            {
              "question": "Explain what Closure is and how it impacts private functions & variables.",
              "answer": "A closure is a function that has access to variables in the parent scope, even after the parent scope has been closed. This means that private functions and variables can still be accessed and used by the closure."
            },
            {
              "question": "Describe how private functions & variables are useful.",
              "answer": "Private functions and variables are useful because they can only be accessed by the code within the same file. This means that they can only be accessed by the code that you have written, and no one else can access or change them. This makes your code more secure and less likely to be tampered with."
            },
            {
              "question": "Use inheritance in objects using the factory pattern.",
              "answer": "In the factory pattern, inheritance is used to extend the functionality of an object by creating a new object that inherits the properties of the original object. The new object can then be customized to add new functionality."
            },
            {
              "question": "Explain the module pattern.",
              "answer": "The module pattern is a design pattern used in software engineering that isolates the business logic of a software application into discrete, independent modules. This type of design pattern is often used in object-oriented programming languages like Java and C#. The module pattern is also sometimes referred to as the service locator pattern."
            },
            {
              "question": "Describe IIFE. What does it stand for?",
              "answer": "An IIFE is an Immediately Invoked Function Expression. It is a function that is immediately executed when it is defined."
            },
            {
              "question": "Briefly explain namespacing and how it’s useful.",
              "answer": "Namespacing is the process of creating unique names for variables and functions so that they don't conflict with other variables and functions in your code. This is especially important in large projects where multiple developers are working on the same codebase. Namespacing can help prevent errors and make your code more readable."
            },
            {
              "question": "Briefly explain namespacing and how it’s useful.",
              "answer": "Namespacing is the process of creating unique names for variables and functions so that they don't conflict with other variables and functions in your code. This is especially important in large projects where multiple developers are working on the same codebase. Namespacing can help prevent errors and make your code more readable."
            },
            {
              "question": "Describe the pros and cons of using classes in JavaScript.",
              "answer": "Classes in JavaScript can be used to create reusable components. They can also be used to create inheritance hierarchies and to make code more organized and maintainable. However, classes can also make code more difficult to understand and can lead to unexpected behavior."
            },
            {
              "question": "How does JavaScript’s object creation differ from a language like Java or Ruby?",
              "answer": "In JavaScript, objects are created with the keyword 'new'. In Java and Ruby, objects are created with the keyword 'class'."
            },
            {
              "question": "Explain the differences between object constructors and classes.",
              "answer": "A class is a template for creating objects. A class defines the variables and methods common to all objects created from the class. An object constructor is a method used to create an object."
            },
            {
              "question": "What are “getters” & “setters”?",
              "answer": "Getters and setters are methods used to get and set the value of a property in an object, respectively."
            },
            {
              "question": "Describe computed names and class fields.",
              "answer": "Computed names and class fields are two ways to create variables in JavaScript. Computed names are variables that are created by using an expression, while class fields are variables that are created by using the keyword class."
            },
            {
              "question": "Describe function binding.",
              "answer": "Function binding is the process of setting up a connection between a function and the object it will be operating on. This is usually done by passing a reference to the function and the object as arguments to a function that sets up the binding."
            },
            {
              "question": "Describe static properties.",
              "answer": "A static property is a property that is shared by all instances of a class. Static properties are defined on the class itself, and not on the prototype."
            },
            {
              "question": "How is inheritance used with classes?",
              "answer": "Inheritance is used with classes to create a parent-child relationship between two classes. This relationship allows a child class to inherit the attributes and methods of a parent class."
            },
            {
              "question": "Why is favoring Composition over Inheritance suggested?",
              "answer": "Favoring composition over inheritance is suggested because it is generally more flexible and easier to maintain. Inheritance can create tight coupling between classes, which can make it difficult to change the code later on."
            },
            {
              "question": "Explain what npm is and where it was commonly used before being adopted on the frontend.",
              "answer": "Npm is a package manager for Javascript. It was commonly used for backend development before being adopted by the frontend."
            },
            {
              "question": "Describe what npm init does and what package.json is.",
              "answer": "npm init creates a package.json file, which is a JSON file that contains information about the project, like the name, version, dependencies, etc."
            },
            {
              "question": "Know how to install packages using npm.",
              "answer": "The npm install command will install dependencies from a package.json file: npm install"
            },
            {
              "question": "Describe what a JavaScript module bundler like webpack is.",
              "answer": "A JavaScript module bundler is a tool that bundles JavaScript files into a single file (or a few files) for loading by a browser. Webpack is a popular JavaScript module bundler."
            },
            {
              "question": "Explain what the concepts “entry” and “output” mean as relates to webpack.",
              "answer": "'Entry' is the point webpack will start looking for dependencies in your project. This is typically set to be the root JS file. 'Output' is the location webpack will bundle your dependencies into a single file."
            },
            {
              "question": "Briefly explain what a development dependency is.",
              "answer": "A development dependency is a dependency that is used during the development process of a project, but is not required for the project to run."
            },
            {
              "question": "Explain what “transpiling code” means and how it relates to frontend development.",
              "answer": "Transpiling code means converting code from one language to another. In the context of frontend development, this usually means converting code from a newer version of JavaScript to an older version, so that it can run in older browsers."
            },
            {
              "question": "Briefly describe what a task runner is and how it’s used in frontend development.",
              "answer": "A task runner is a tool that automates common frontend development tasks, such as compiling Sass files into CSS, minifying JavaScript, and linting code. Task runners can save developers a lot of time by automating these repetitive tasks."
            },
            {
              "question": "Describe how to write an npm automation script.",
              "answer": "Assuming you want to create an npm script: 1. In your `package.json`, under the 'scripts' key, create a new key with the name of your script. The value should be the command you want to run. 2. To run the script, type `npm run` followed by the name of your script."
            },
            {
              "question": "Explain one of the main benefits of writing code in modules.",
              "answer": "One benefit of writing code in modules is that it allows for code reuse. For example, if a module contains a function that is needed in multiple places, that function can be imported into multiple files and used as needed. This helps to avoid duplication of code and makes code easier to maintain."
            },
            {
              "question": "Explain “named exports” and “default exports”.",
              "answer": "Named exports are variables or functions that are exported from a module under a given name. Default exports are typically a single module value, such as a function, that is exported from a module."
            },
            {
              "question": "How do you load CSS using webpack?",
              "answer": "To load CSS using webpack, you need to use the css-loader and style-loader. The css-loader will load the CSS file and the style-loader will add it to the HTML page."
            },
            {
              "question": "How do you load images using webpack?",
              "answer": "Images can be loaded using webpack by using the file-loader or url-loader modules."
            },
            {
              "question": "How do you load fonts using webpack?",
              "answer": "You can load fonts using webpack by using the file-loader or url-loader modules."
            },
            {
              "question": "How do you load data using webpack?",
              "answer": "To load data using webpack, you can use the import statement."
            },
            {
              "question": "How would you track errors in bundled source code?",
              "answer": "If you are using a bundler like Webpack, you can use the 'source map' option to generate a source map file that can be used to map error messages back to the original source code."
            },
            {
              "question": "Explain the “Single Responsibility Principle”.",
              "answer": "The Single Responsibility Principle is the principle that a class or module should have one, and only one, reason to change. This principle is often used in conjunction with the Open/Closed Principle, which states that a class or module should be open for extension but closed for modification."
            },
            {
              "question": "Briefly explain the additional SOLID principles.",
              "answer": "The additional SOLID principles are: -S: Single Responsibility Principle - a class should only have one responsibility -O: Open/Closed Principle - a class should be open for extension but closed for modification -L: Liskov Substitution Principle - subclasses should be substitutable for their superclasses -I: Interface Segregation Principle - clients should not be forced to depend on methods they do not use -D: Dependency Inversion Principle - higher-level modules should not depend on lower-level modules"
            },
            {
              "question": "Explain what “tightly coupled” objects are and why we want to avoid them.",
              "answer": "\"Tightly coupled\" objects are those that are closely linked together. We want to avoid them because they can be difficult to change or reuse."
            }
          ]
        },
        {
          "title": "JavaScript in the Real World",
          "flashcards": [
            {
              "question": "What is linting?",
              "answer": "Linting is a process of running a program that will analyze code for potential errors."
            },
            {
              "question": "Which problems can linting prevent?",
              "answer": "Linting can prevent many problems, including:\n\n- code that does not conform to a style guide\n- code that is difficult to read or understand\n- code that is error-prone\n- code that is not well-tested\n- code that is not portable"
            },
            {
              "question": "Why should you use Prettier?",
              "answer": "Prettier is an opinionated code formatter that enforces a consistent code style. It can be used to format code in a wide variety of languages and can be integrated into various code editors. Prettier can help to avoid style debates and can make code easier to read and maintain."
            },
            {
              "question": "What are some different types of navigation menus?",
              "answer": "There are many types of navigation menus, but some of the most common are drop-down menus, hamburger menus, and side menus."
            },
            {
              "question": "What are the alternatives to hamburger menus?",
              "answer": "There are many alternatives to hamburger menus, including drop-down menus, accordion menus, and tree menus."
            },
            {
              "question": "What are the downsides of hamburger menus?",
              "answer": "Some potential downsides of hamburger menus include:\n\n1. They can take up a lot of space on a small screen, leaving less room for content.\n\n2. They can be difficult to use, especially if the menu items are not clearly labeled.\n\n3. They can be confusing for users who are not familiar with them."
            },
            {
              "question": "Understand the importance of validating HTML forms before submitting them to a server.",
              "answer": "HTML forms are used to collect user input. Before submitting the form to a server, it is important to validate the form to ensure that the input is valid and complete. Invalid input can cause the form to be rejected by the server, or can cause the server to return an error."
            },
            {
              "question": "Describe the two types of client-side form validation, built-in form validation and validation using JavaScript.",
              "answer": "Built-in form validation is a feature of some web browsers that can validate input elements in an HTML form automatically. This feature is usually enabled by default, but it can be disabled by the user or the web developer. Validation using JavaScript is a technique that can be used to validate input elements in an HTML form manually."
            },
            {
              "question": "Understand JavaScript Constraint Validation API provides more control and customization of form validation.",
              "answer": "The Constraint Validation API offers a set of methods that let you customize the browser's default behavior when checking a form for errors. You can also use this API to trigger the browser to check a form for errors without submitting it.\n\nThe Constraint Validation API is supported in all major browsers, including Chrome, Firefox, Safari, and Edge."
            },
            {
              "question": "Use JavaScript to write custom error messages and add custom styling to the errors.",
              "answer": "// Add custom error message\n\ndocument.getElementById(\"myForm\").addEventListener(\"submit\", function(e){\n  var errorMessage = document.getElementById(\"errorMessage\");\n  var input = document.getElementById(\"myInput\");\n  \n  if(input.value === \"\"){\n    errorMessage.innerHTML = \"Please enter a value\";\n    errorMessage.style.color = \"red\";\n    e.preventDefault();\n  }\n});"
            },
            {
              "question": "Understand forms can also be validated without using Constraint Validation API, which is useful in certain cases.",
              "answer": "Forms can be validated using JavaScript. Forms can be validated using server-side code. Forms can be validated using a combination of JavaScript and server-side code. Forms can be validated using a custom validation function."
            }
          ]
        },
        {
          "title": "Asynchronous JavaScript and APIs",
          "flashcards": [
            {
              "question": "What is a callback?",
              "answer": "A callback is a function that is passed as an argument to another function."
            },
            {
              "question": "What is a promise?",
              "answer": "A promise is a declaration or assurance that one will do a particular thing or that a particular thing will happen."
            },
            {
              "question": "When should you use promises over callbacks?",
              "answer": "If you are dealing with asynchronous code, you should use promises instead of callbacks. Promises are easier to work with and make your code more readable."
            },
            {
              "question": "What does the .then() function do?",
              "answer": "The .then() function is used to specify what should happen when a promise is resolved."
            },
            {
              "question": "What is an API?",
              "answer": "API stands for application programming interface. An API is a set of programming instructions and standards for accessing a web-based software application. A developer uses an API to request information from the application, which is delivered in a format that can be easily read and used by the developer's own application."
            },
            {
              "question": "How is access to an API restricted?",
              "answer": "There are many ways to restrict access to an API. Some common methods are using an API key, using OAuth, or using a token."
            },
            {
              "question": "How do you fetch and extract data from an API?",
              "answer": "There are many ways to fetch and extract data from an API. One way is to use a web scraping tool like Octoparse. Octoparse can help you extract data from an API by automatically creating a scraping template for you."
            },
            {
              "question": "Why might your API request be blocked by the browser, and how might you fix this?",
              "answer": "The browser may be blocking the API request because the site is not secure. To fix this, you can try using a secure connection (https://) or a VPN."
            },
            {
              "question": "How do you declare an async function?",
              "answer": "To declare an async function, you simply need to use the async keyword before the function declaration:\n\nasync function foo() {\n  // code goes here\n}"
            },
            {
              "question": "What does the async keyword do?",
              "answer": "The async keyword allows a method to be executed asynchronously. This means that the method can be run in a separate thread from the main program, and does not need to wait for the rest of the program to finish before it starts."
            },
            {
              "question": "What does the await keyword do?",
              "answer": "The await keyword is used to wait for a Promise to resolve, before running the rest of the code in the async function."
            },
            {
              "question": "What is returned from an async function?",
              "answer": "An async function returns a promise."
            },
            {
              "question": "What happens when an error is thrown inside an async function?",
              "answer": "If an error is thrown inside an async function, it will be caught by the promise that is returned by the async function."
            },
            {
              "question": "How can you handle errors inside an async function?",
              "answer": "You can handle errors inside an async function by using the try/catch statement."
            }
          ]
        },
        {
          "title": "A Bit of Computer Science",
          "flashcards": [
            {
              "question": "What is an Algorithm?",
              "answer": "An algorithm is a set of instructions that are followed in order to complete a task."
            },
            {
              "question": "What is the importance of algorithms in web development?",
              "answer": "Algorithms are important in web development because they can be used to optimize webpages for search engines, to create better user experiences, and to improve the overall performance of a website."
            },
            {
              "question": "What is pseudocode?",
              "answer": "Pseudocode is a language that can be used to write out the steps of an algorithm without using a specific programming language."
            },
            {
              "question": "How would you briefly define a recursive function?",
              "answer": "A recursive function is a function that calls itself."
            },
            {
              "question": "What is the point of recursion? Is it more efficient than using a plain loop?",
              "answer": "Recursion is a technique for solving problems that can be divided into smaller subproblems. It is often more efficient than using a plain loop because it avoids duplication of work."
            },
            {
              "question": "What are the 2 essential parts in a recursive function?",
              "answer": "The two essential parts in a recursive function are the base case and the recursive case."
            },
            {
              "question": "Why is “stack overflow” relevant to a recursive problem?",
              "answer": "\"Stack overflow\" is relevant to a recursive problem because a stack overflow can occur when a program tries to store too much data on the stack. This can happen when a program uses too much recursion."
            },
            {
              "question": "What is Big O?",
              "answer": "Big O notation is a mathematical notation that describes the limiting behavior of a function when the argument tends towards a particular value or infinity. It is a way of formalizing the concept of a limiting process."
            },
            {
              "question": "What are the Big O Notations?",
              "answer": "There are three common Big O Notations:\n\nO(1), O(log n), and O(n).\n\nO(1) means that the time complexity is constant, regardless of the input size. O(log n) means that the time complexity is logarithmic, meaning it will increase at a slower rate as the input size increases. O(n) means that the time complexity is linear, meaning it will increase at the same rate as the input size increases."
            },
            {
              "question": "Why use Big O?",
              "answer": "There are a few reasons to use Big O notation:\n\n1. To describe the runtime of an algorithm.\n2. To compare the efficiency of two algorithms.\n3. To predict the behavior of an algorithm as the input size grows."
            },
            {
              "question": "What is Big Omega and why isn’t it as useful?",
              "answer": "Big Omega is a way of measuring the efficiency of an algorithm. It is the asymptotic upper bound of the running time of an algorithm. While it is useful in determining the efficiency of an algorithm, it is not as useful in determining the actual running time of an algorithm, since the actual running time may be different from the asymptotic upper bound."
            },
            {
              "question": "What is space complexity?",
              "answer": "In computer science, space complexity is the amount of memory required to store the data associated with a given algorithm or problem."
            },
            {
              "question": "How do we measure space complexity?",
              "answer": "The space complexity of an algorithm is the amount of memory required to run the algorithm."
            },
            {
              "question": "What are the main considerations we should consider before optimising code?",
              "answer": "Before optimising code, we should consider the following:\n\n- The time complexity of the code\n- The space complexity of the code\n- The trade-offs between time and space complexity\n- The readability and maintainability of the code"
            },
            {
              "question": "What is the difference between a stack and a queue?",
              "answer": "A stack is a data structure that allows items to be added and removed in a last-in, first-out (LIFO) order. A queue is a data structure that allows items to be added and removed in a first-in, first-out (FIFO) order."
            },
            {
              "question": "What are the enqueue and dequeue properties?",
              "answer": "The enqueue property is that an element can be added to the back of the queue. The dequeue property is that an element can be removed from the front of the queue."
            },
            {
              "question": "What is a linked list? What is a node?",
              "answer": "A linked list is a data structure that stores a list of items. Each item in the list is called a node. Each node contains a reference to the next node in the list."
            },
            {
              "question": "What type of algorithm would you use to perform a binary search?",
              "answer": "A binary search algorithm would be used to perform a binary search."
            },
            {
              "question": "What abstract data type would you use to defer/store nodes in a breadth-first tree traversal?",
              "answer": "A queue would be the most appropriate abstract data type to use for deferring/storing nodes in a breadth-first tree traversal"
            }
          ]
        },
        {
          "title": "Intermediate Git",
          "flashcards": [
            {
              "question": "How can you amend your last commit?",
              "answer": "To amend your last commit in Git, you can use the 'git commit --amend' command. This allows you to make changes to the last commit message or add additional changes to the commit."
            },
            {
              "question": "What are some different ways to rewrite history?",
              "answer": "There are several ways to rewrite history in Git, such as using 'git rebase', 'git reset', 'git cherry-pick', and 'git filter-branch'. These commands allow you to modify the commit history, reorder commits, squash or split commits, and more."
            },
            {
              "question": "What is a safe way to push history changes to a remote repository?",
              "answer": "A safe way to push history changes to a remote repository is by using 'git push --force-with-lease'. This option ensures that you don't overwrite changes made by others unknowingly, as it will only allow the push if the remote branch matches your expectations."
            },
            {
              "question": "What are the dangers of history-changing operations?",
              "answer": "The dangers of history-changing operations in Git include the potential to lose commits permanently, introduce conflicts, and disrupt collaboration with other team members. It is crucial to use these operations with caution and communicate changes to the team."
            },
            {
              "question": "What are best practices of history-changing operations?",
              "answer": "Some best practices for history-changing operations in Git are to avoid rewriting history on shared branches, create backup branches before making significant changes, and communicate with your team about any history modifications you plan to perform."
            },
            {
              "question": "Explain what it means for branches to be pointers.",
              "answer": "In Git, branches are simply pointers to specific commits in the repository. When you create a new commit on a branch, the branch pointer moves forward to the new commit. Multiple branches can point to the same commit, and they can diverge and merge as development progresses."
            },
            {
              "question": "What name is typically given for a Git remote that points to a repo that’s been forked?",
              "answer": "The typical name given to a Git remote that points to a repo that's been forked is 'origin'. This convention allows you to easily push changes to the forked repository from your local repository."
            },
            {
              "question": "Can you directly send your changes to a repository that you don’t own/have write access to?",
              "answer": "No, you cannot directly send your changes to a repository that you don't own or have write access to. Instead, you can fork the repository, make your changes in your fork, and then create a pull request to propose your changes to the original repository. The repository owner can review your changes and choose to accept or reject the pull request."
            },
            {
              "question": "What should you do immediately before merging your feature branch into main?",
              "answer": "Before merging your feature branch into the main branch, it is essential to ensure that your feature branch is up-to-date with the latest changes from the main branch. You can do this by performing a 'git pull' on the main branch to fetch and merge the latest changes into your local repository. This helps prevent conflicts and ensures a smooth merge."
            }
          ]
        },
        {
          "title": "Testing JavaScript",
          "flashcards": [
            {
              "question": "What are the benefits of TDD?",
              "answer": "Test-Driven Development (TDD) offers several benefits, such as improved code quality, early bug detection, better code maintainability, increased developer confidence, and a more predictable development process."
            },
            {
              "question": "What are some common jest matchers?",
              "answer": "Some common Jest matchers include 'toBe' for strict equality, 'toEqual' for deep equality, 'toBeTruthy' and 'toBeFalsy' for truthiness checks, 'toContain' for array or string inclusion, 'toMatch' for regular expression matching, and 'toThrow' for checking if a function throws an error."
            },
            {
              "question": "What is tightly coupled code?",
              "answer": "Tightly coupled code refers to a situation where two or more components in a system are strongly dependent on each other. Changes in one component may require modifications in other tightly connected components, making the codebase less flexible and harder to maintain."
            },
            {
              "question": "What are the two requirements for a function to be pure?",
              "answer": "For a function to be pure, it must satisfy two requirements: 1) It should always produce the same output for the same input, and 2) It must not cause any side effects, such as modifying global state or external resources."
            },
            {
              "question": "What are side effects and why is it important to identify them when testing a function?",
              "answer": "Side effects are any changes a function makes to the outside world beyond the scope of the function itself, such as modifying variables outside its scope or making network calls. Identifying side effects is crucial when testing a function because it helps ensure that the function behaves as expected and does not have unintended consequences on the system."
            },
            {
              "question": "What are two solutions to the tightly coupled code problem?",
              "answer": "Two solutions to the tightly coupled code problem are Dependency Injection and the use of interfaces or abstractions. Dependency Injection allows components to declare their dependencies explicitly, making it easier to replace or mock those dependencies for testing. Interfaces or abstractions allow components to interact through well-defined contracts, reducing direct dependencies on concrete implementations."
            },
            {
              "question": "What is mocking?",
              "answer": "Mocking is a technique used in testing to create objects that simulate the behavior of real objects in a controlled way. Mocks are often used to replace external dependencies or complex objects during testing, allowing developers to isolate and test specific parts of the system in isolation."
            },
            {
              "question": "When would you use a mock function?",
              "answer": "You would use a mock function when you need to simulate the behavior of a real function or object to isolate the code under test from external dependencies. Mock functions allow you to control the behavior of the mocked object and focus on testing the logic inside the function being tested."
            },
            {
              "question": "How should you test incoming query messages?",
              "answer": "You should test incoming query messages by writing tests that set up the expected query and the expected response, then invoke the relevant function or API and compare the actual response with the expected response using appropriate Jest matchers."
            },
            {
              "question": "Why should you not test implementation?",
              "answer": "Testing implementation details can make the tests brittle and tightly coupled to the codebase, making it harder to refactor or modify the implementation without breaking the tests. It is better to test the behavior and functionality of the code rather than its specific implementation details."
            },
            {
              "question": "Should you test private methods?",
              "answer": "In general, it is not recommended to test private methods directly. Private methods are implementation details and should be tested indirectly by testing the public methods that utilize these private methods. Testing public methods ensures that the expected behavior is correctly achieved through the private methods."
            },
            {
              "question": "Why should you not test messages with no side effects?",
              "answer": "Testing messages with no side effects can be unnecessary and add overhead to the testing process without providing significant benefits. Such messages typically have straightforward behavior and do not require extensive testing, as there are no complex interactions with external systems or state changes to validate."
            }
          ]
        }
      ]
    },
    {
      "title": "Advanced HTML and CSS Course",
      "lessons": [
        {
          "title": "Animation",
          "flashcards": [
            {
              "question": "What are the four main functions of the transform property?",
              "answer": "The four main functions of the transform property are translate(), rotate(), scale(), and skew(). These can be used to move, rotate, scale, and skew an element respectively."
            },
            {
              "question": "Which function can be used to move an object through space on the X, Y, or Z axis?",
              "answer": "The translate() function can be used to move an object through space on the X, Y, or Z axis."
            },
            {
              "question": "Which function can be used to make an object larger or smaller on the X, Y, or Z axis?",
              "answer": "The scale() function can be used to make an object larger or smaller on the X, Y, or Z axis."
            },
            {
              "question": "What additional function is required for 3D transforms?",
              "answer": "The perspective() function is often used for 3D transforms to give a sense of depth."
            },
            {
              "question": "Are all CSS properties animatable?",
              "answer": "No, not all CSS properties are animatable. Examples of non-animatable properties are: display, margin, padding, etc."
            },
            {
              "question": "What are the long and short-hand notations for transitions?",
              "answer": "The long-hand notation for a transition is specifying the individual properties like transition-property, transition-duration, transition-timing-function, and transition-delay. The shorthand notation is the 'transition' property, where you can define all of these in one line."
            },
            {
              "question": "What is the stacking context?",
              "answer": "The stacking context is a three-dimensional conceptualization of HTML elements along an imaginary z-axis relative to the user, who is assumed to be facing the viewport or the webpage."
            },
            {
              "question": "Why do you need to keep an eye on repaints?",
              "answer": "Repaints can be expensive in terms of performance. Each repaint requires the browser to recalculate the layout and re-render the page, which can slow down your application."
            },
            {
              "question": "What are the long and short-hand notations for CSS animations?",
              "answer": "The long-hand notation for CSS animations includes properties like animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction, animation-fill-mode, and animation-play-state. The shorthand notation is the 'animation' property, where you can define all of these in one line."
            },
            {
              "question": "How do you add keyframes to an animation?",
              "answer": "Keyframes in CSS are added using the @keyframes rule, followed by the name of the animation. Inside the @keyframes rule, you can define different stages of the animation using percentages from 0% to 100%."
            },
            {
              "question": "When would you use an animation over a transition (and vice versa)?",
              "answer": "Animations are used when you want to have fine-grained control over the intermediate steps of a sequence over a period of time. Transitions are used when you want to animate a change from one state to another, over a small duration, typically in response to user actions like hover, focus, or active."
            }
          ]
        },
        {
          "title": "Accessibility",
          "flashcards": [
            {
              "question": "What is web accessibility?",
              "answer": "Web accessibility refers to the inclusive practice of removing barriers that prevent interaction with, or access to websites, by people with disabilities. It ensures that all users, regardless of their ability, can access, understand, navigate, and interact with the Web."
            },
            {
              "question": "Who truly benefits from accessibility features?",
              "answer": "While web accessibility primarily benefits people with disabilities, it also benefits others such as elderly users with changing abilities due to aging, people with temporary disabilities, and even people using mobile devices, among others."
            },
            {
              "question": "What is the purpose of the Web Content Accessibility Guidelines?",
              "answer": "The purpose of the Web Content Accessibility Guidelines (WCAG) is to provide a single shared standard for web content accessibility that meets the needs of individuals, organizations, and governments internationally. It provides recommendations for making Web content more accessible, primarily for people with disabilities."
            },
            {
              "question": "What are the 4 principles of the WCAG?",
              "answer": "The four principles of the WCAG are Perceivable, Operable, Understandable, and Robust (POUR). These principles lay the foundation necessary for anyone to access and use web content."
            },
            {
              "question": "Why is semantic HTML important for accessibility?",
              "answer": "Semantic HTML is crucial for accessibility because it provides meaning to the web content which helps assistive technologies, like screen readers, to properly convey the information to its users."
            },
            {
              "question": "What are the seven HTML elements that define landmarks on a page?",
              "answer": "The seven HTML elements that define landmarks are: header, nav, main, article, section, aside, and footer."
            },
            {
              "question": "What is a contrast ratio?",
              "answer": "A contrast ratio is a measure used to calculate the difference in color and brightness between the foreground and background of text on a webpage. It is a crucial aspect of web accessibility."
            },
            {
              "question": "What are two ways you can check a contrast ratio using your dev tools?",
              "answer": "You can check contrast ratio using browser dev tools such as the 'Inspect Element' feature in browsers like Chrome or Firefox. Also, there are specific tools like Chrome's Lighthouse or plugins like aXe which can be used for accessibility auditing including checking contrast ratios."
            },
            {
              "question": "What should you avoid when conveying information to users?",
              "answer": "You should avoid relying solely on color to convey information as this can make content inaccessible to users who are color blind or visually impaired. Also, avoid complex language or jargon without providing explanations or alternatives."
            },
            {
              "question": "What are two things that interactive elements must have for keyboard users?",
              "answer": "Interactive elements should have a focus state and they should be operable using keyboard commands only. This ensures users who navigate using the keyboard can access and interact with these elements."
            },
            {
              "question": "What are focus styles?",
              "answer": "Focus styles are CSS styles applied to an element when it has focus. They are typically applied to interactive elements such as links, form controls, and buttons to indicate they can be interacted with."
            },
            {
              "question": "Why should you never completely remove focus styles from an element?",
              "answer": "Removing focus styles from an element can make it difficult for keyboard users to navigate the site, as they won't be able to see which element is currently focused."
            },
            {
              "question": "What is the tab order?",
              "answer": "The tab order is the order in which elements receive focus when the user presses the tab key. It is determined by the order of elements in the HTML document."
            },
            {
              "question": "What is the best way to hide hidden content from assistive technologies?",
              "answer": "You can use the 'aria-hidden' attribute or the 'display: none' CSS rule to hide content from assistive technologies."
            },
            {
              "question": "What are three rules you should follow in order to provide meaningful links?",
              "answer": "To provide meaningful links: 1) the link text should describe the destination; 2) generic text like 'click here' should be avoided; 3) links that lead to the same destination should have the same description."
            },
            {
              "question": "What information should you inform users of in order to provide meaningful error messages in forms?",
              "answer": "Error messages should identify the error clearly, provide a reason why the error occurred, and suggest a solution to correct the error."
            },
            {
              "question": "When should you use the empty string/null value for the alt attribute?",
              "answer": "You should use an empty string for the alt attribute when the image is purely decorative and provides no content or functional information."
            },
            {
              "question": "What purpose does WAI-ARIA serve?",
              "answer": "Web Accessibility Initiative - Accessible Rich Internet Applications (WAI-ARIA) serves to improve the accessibility of web content and web applications, particularly those developed with JavaScript, by providing additional semantics to help assistive technologies make sense of the content."
            },
            {
              "question": "What are the four things ARIA can’t do?",
              "answer": "ARIA can’t: 1) make an inaccessible interface accessible; 2) aid with usability issues if the underlying interface has usability problems; 3) change behavior of the UI; 4) create accessible tables or form elements if native HTML isn’t used properly."
            },
            {
              "question": "What are the five rules of ARIA?",
              "answer": "The five rules of ARIA are: 1) If you can use a native HTML element or attribute with the semantics and behavior you require, do so; 2) Do not change native semantics, unless you really have to; 3) All interactive ARIA controls must be usable with the keyboard; 4) Do not use role='presentation' or aria-hidden='true' on a focusable element; 5) All interactive elements must have an accessible name."
            },
            {
              "question": "What is the accessibility tree?",
              "answer": "The accessibility tree is a structure produced by the browser's Accessibility APIs that provides information about each element of the website in a way that's useful to assistive technologies, such as screen readers."
            },
            {
              "question": "What are the differences between the three ARIA labels?",
              "answer": "aria-label provides an invisible label where a visible label cannot be used. aria-labelledby allows the use of another element to label the component. aria-describedby provides a reference to elements that offer a description of the component."
            },
            {
              "question": "What does the aria-hidden attribute do?",
              "answer": "The aria-hidden attribute tells assistive technology to ignore the element on which it is applied, effectively hiding it from the accessibility tree."
            },
            {
              "question": "What are some of the various accessibility features available in your browser’s DevTools?",
              "answer": "Browser DevTools provide a range of accessibility features like inspecting ARIA attributes, checking color contrast ratios, simulating color blindness, checking keyboard accessibility, and more."
            },
            {
              "question": "Which third-party accessibility auditing tool is available in the Chrome DevTools by default?",
              "answer": "Lighthouse, a open-source, automated tool for improving the quality of web pages, is available in Chrome DevTools by default and includes features for auditing accessibility."
            }
          ]
        },
        {
          "title": "Responsive Design",
          "flashcards": [
            {
              "question": "What is Responsive Design?",
              "answer": "Responsive Design is an approach to web design where web pages render well on a variety of devices and window or screen sizes. It is achieved using fluid grid layouts, flexible images and media, and CSS media queries to adapt the layout to the viewing environment."
            },
            {
              "question": "Why should you avoid fixed width?",
              "answer": "You should avoid fixed width because it doesn't adapt to the size of the viewport or screen size. This can result in content overflowing off the edge of the screen on smaller devices, or being centered with wide empty spaces on larger ones, leading to a poor user experience."
            },
            {
              "question": "Why should you avoid fixed height?",
              "answer": "You should avoid fixed height because content can overflow and become hidden if it needs more space than the fixed height allows. Additionally, it doesn't adapt to changes in the viewport height, which can vary significantly between devices and orientations."
            },
            {
              "question": "In what situations might it be appropriate to use a fixed height or width?",
              "answer": "Fixed heights or widths might be appropriate in some situations such as for specific design elements like a logo or an icon, where their dimensions need to be maintained. However, they should generally be used sparingly in a responsive design context."
            },
            {
              "question": "Why should you avoid percentages?",
              "answer": "Percentage dimensions are relative to the size of the parent container, so they can lead to unpredictable results if the parent's size isn't controlled. However, in responsive design, percentages are often used effectively to create fluid layouts that adapt to the viewport."
            },
            {
              "question": "What is the main difference between object-fit and background-size?",
              "answer": "The main difference between object-fit and background-size is their use cases. 'object-fit' is used for content images (like img or video), while 'background-size' is used for background images. Both control how an image should be resized to fit its container."
            },
            {
              "question": "How can you define a width and a height on an img without distorting it?",
              "answer": "To define a width and a height on an img without distorting it, you can use the CSS property 'object-fit'. For instance, 'object-fit: cover' scales the image to cover the element, maintaining its aspect ratio."
            },
            {
              "question": "Why would you want to provide different images at different screen resolutions?",
              "answer": "You might want to provide different images at different screen resolutions to ensure that images look sharp on high-resolution screens, while also not loading unnecessarily large images on lower resolution screens where the extra detail wouldn't be visible. This can improve both the appearance and performance of a website."
            },
            {
              "question": "When would you want to use an img with a srcset vs a picture?",
              "answer": "You would want to use an img with a srcset when you only need to provide different resolutions of the same image. You would want to use a picture element when you need more control over which image is displayed, such as providing different images for different viewport sizes or screen densities."
            },
            {
              "question": "How do you define a media query to create a mobile layout for your site?",
              "answer": "You define a media query to create a mobile layout for your site using the @media rule in CSS. For example, '@media (max-width: 600px) {...}' will apply the CSS rules within the brackets if the viewport is 600px wide or less."
            },
            {
              "question": "What is the difference between max-width and min-width in a media query definition?",
              "answer": "In a media query, 'max-width' is the maximum viewport width at which the styles will apply, while 'min-width' is the minimum viewport width at which the styles will apply. So, a media query with 'max-width' will apply the styles for viewports smaller than the specified size, and 'min-width' will apply the styles for viewports larger than the specified size."
            }
          ]
        }
      ]
    },
    {
      "title": "React",
      "lessons": [
        {
          "title": "Introduction",
          "flashcards": [
            {
              "question": "What is the purpose of React?",
              "answer": "React is a JavaScript library that aims to simplify the development of visual interfaces. Developed by Facebook, React allows developers to create reusable UI components. The main purpose of React is to be fast, scalable, and simple. It works only on user interfaces in the application, which allows it to be easily integrated with other libraries or existing projects."
            },
            {
              "question": "What are the benefits of using React?",
              "answer": "React offers several benefits: 1) It improves performance through virtual DOM. 2) It helps write clean, modular, and reusable components. 3) Unidirectional data flow provides better control throughout the application. 4) It is backed by a strong community and has extensive libraries and tools. 5) It is SEO friendly as compared to other JavaScript libraries."
            },
            {
              "question": "What are some of the ways we can start a new React project?",
              "answer": "There are several ways to start a new React project: 1) Using 'Create React App', a toolchain from Facebook. 2) Using 'Next.js' for server-rendered React applications. 3) Using 'Gatsby', a static site generator for React. 4) Using 'Vite', a build tool that provides a faster and leaner development experience for modern web projects."
            },
            {
              "question": "Why should we initially be using pre-made toolchains instead of making our own?",
              "answer": "Pre-made toolchains like Create React App or Vite save you time and effort by setting up project structures, implementing best practices, and handling build configurations. This allows developers to focus on writing the application code. Moreover, they are maintained by large communities, so they are often more reliable and up-to-date."
            },
            {
              "question": "What is Vite and why would we use it?",
              "answer": "Vite is a modern front-end build tool created by Evan You, the creator of Vue.js. It offers a faster and leaner development experience for modern web projects. Vite provides features like hot module replacement (HMR), which reloads modules in the browser as they are edited without a full page refresh. It also supports TypeScript, JSX, CSS, JSON and other file types out of the box."
            },
            {
              "question": "What command can we run to scaffold a new React project using Vite?",
              "answer": "To scaffold a new React project using Vite, you can run the command 'npx create-vite my-react-app --template react'. This will create a new directory called 'my-react-app' with a minimal Vite configuration for a React project."
            },
            {
              "question": "What is in the public folder?",
              "answer": "The public folder of a React project usually contains static assets that should be served directly by the web server, like the index.html file, favicon, and images. The files in this directory won't be processed by Webpack, so they are copied to the build folder as they are."
            },
            {
              "question": "What is in the src folder?",
              "answer": "The src (source) folder contains the core code of the React application. This includes JavaScript (or TypeScript) code, CSS or SCSS files, images, and other assets that require processing by Webpack or other bundlers. Typically, it contains components, hooks, utilities, services, styles, and assets."
            },
            {
              "question": "Why are the React Developer Tools useful?",
              "answer": "React Developer Tools is a browser extension that allows developers to inspect the React component hierarchies in the virtual DOM. You can select specific elements in the DOM to inspect their props and state. It can significantly help in debugging your applications, observing component hierarchy, and understanding component relationships within the app."
            }
          ]
        },
        {
          "title": "Getting Started With React",
          "flashcards": [
            {
              "question": "What does a React element look like?",
              "answer": "A React element is an object representation of a DOM element. It is written using JSX and can look like this: <h1>Hello, world!</h1>. It describes what you want to see on the screen."
            },
            {
              "question": "How would you create a functional component?",
              "answer": "A functional component is a JavaScript function that returns a React element. Here's an example: function Welcome(props) { return <h1>Hello, {props.name}</h1>; }."
            },
            {
              "question": "How do you export and then import a component?",
              "answer": "You can export a component using the 'export' keyword. For example: 'export default Welcome'. You can import it in another file using the 'import' keyword. For example: 'import Welcome from './Welcome'."
            },
            {
              "question": "What is JSX?",
              "answer": "JSX (JavaScript XML) is a syntax extension for JavaScript. It is used with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript."
            },
            {
              "question": "Why do we use JSX?",
              "answer": "JSX makes it easier to write and add HTML in React. It also allows us to write HTML elements in JavaScript and place them in the DOM without any createElement() and/or appendChild() methods. JSX converts HTML tags into react elements and also makes it possible to create complex UI by enclosing JavaScript expressions within braces."
            },
            {
              "question": "What are the three rules of JSX?",
              "answer": "1) When combining multiple elements they must be wrapped in a single parent element. 2) JSX uses 'className' instead of 'class' for adding CSS classes to elements. 3) All tags must close, either by using self-closing tag syntax or with a corresponding closing tag."
            },
            {
              "question": "How do you reference a dynamic value inside of your JSX?",
              "answer": "You can reference a dynamic value inside of your JSX by enclosing the value in curly braces. For example, {variableName}."
            },
            {
              "question": "How do you render a list of elements/components in JSX?",
              "answer": "To render a list of elements/components in JSX, you can use the JavaScript map() function. For example, you could use 'items.map((item) => <li>{item}</li>)' to create an array of li elements."
            },
            {
              "question": "What are the ways you could render UI conditionally?",
              "answer": "You can render UI conditionally in React using JavaScript operators like 'if' or the conditional (ternary) operator. You can also use logical && operator for inline rendering."
            },
            {
              "question": "How would you conditionally return JSX?",
              "answer": "You can conditionally return JSX using JavaScript's conditional (ternary) operator. For example: 'condition ? <ComponentIfTrue /> : <ComponentIfFalse />'."
            },
            {
              "question": "Why does React need keys?",
              "answer": "Keys help React identify which items have changed, are added, or are removed. They should be given to the elements inside an array to give the elements a stable identity."
            },
            {
              "question": "How do you use keys?",
              "answer": "Keys can be used in React by assigning the 'key' attribute with a unique value to the element. For example, when rendering a list, you can assign the item's index or id as a key: 'items.map((item, index) => <li key={index}>{item}</li>)'."
            },
            {
              "question": "Where should the key value ideally come from?",
              "answer": "The key value should ideally be a unique and constant id. If a unique id is not available, you might resort to using the index as a key. However, this can lead to performance and data integrity issues if the items in your list can change order, be deleted, or new items can be added."
            },
            {
              "question": "When can we use an array index as the key value?",
              "answer": "Although it's not recommended, you can use the array index as a key value when the list is static, and the list items have no logical id, and the items will not be reordered or filtered."
            },
            {
              "question": "What is an anti-pattern when using keys?",
              "answer": "An anti-pattern when using keys is using indexes for keys if the order of items may change. This can negatively impact performance and may cause issues with the component state."
            },
            {
              "question": "How does data flow between React components? From child to parent? From parent to child? Both?",
              "answer": "In React, data flows unidirectionally, from parent to child through properties (props). To make data flow from child to parent, the parent can pass a function to the child through props, and the child may invoke that function and pass data as its argument."
            },
            {
              "question": "Why do we use props in React?",
              "answer": "Props (properties) in React allow components to communicate with each other. They are used to pass data from parent to child components, as well as to pass callback functions to handle events or change the state."
            },
            {
              "question": "How do we define default properties on a React component? What are some benefits in doing so?",
              "answer": "Default props can be defined by setting the 'defaultProps' property on the component. The benefits of using defaultProps include type checking and error prevention, simplifying the component usage, and providing default behavior."
            },
            {
              "question": "How can we pass functions as props?",
              "answer": "We can pass functions as props the same way we pass any other props. For example: <ChildComponent onClick={this.handleClick} />. In this case, 'handleClick' is a method defined in the parent component and passed as a prop to 'ChildComponent'."
            }
          ]
        },
        {
          "title": "States And Effects",
          "flashcards": [
            {
              "question": "What is state?",
              "answer": "In React, state refers to a built-in object that a component can use to keep track of changing data. This data can influence the component's behavior, rendering, and attributes."
            },
            {
              "question": "What is the useState hook and how to use it?",
              "answer": "useState is a Hook that allows you to add React state to function components. It takes the initial state as an argument and returns an array containing the current state value and a function to update it. For example: const [count, setCount] = useState(0)."
            },
            {
              "question": "What happens to the component when one of its state is changed?",
              "answer": "When a state value changes, the component will re-render to reflect the new state. If the new state value leads to different render output, React will update the DOM accordingly."
            },
            {
              "question": "What are some of the rules of hooks?",
              "answer": "1) Only call Hooks at the top level. Don't call Hooks inside loops, conditions, or nested functions. 2) Only call Hooks from React function components. Don’t call Hooks from regular JavaScript functions."
            },
            {
              "question": "What should you keep in mind while declaring state?",
              "answer": "When declaring state in React, it's important to keep in mind that state should be kept as simple as possible, and should only include data that could change and affect the rendering of the component."
            },
            {
              "question": "What does “state is immutable” mean?",
              "answer": "When we say 'state is immutable' in React, it means the state object cannot be modified directly. To update the state, we need to use the 'setState' method or the state updating function returned by 'useState' hook."
            },
            {
              "question": "What does “state as a snapshot” mean?",
              "answer": "The phrase 'state as a snapshot' means that state data represents the state of the component at a specific point in time. When a component's state changes, a new 'snapshot' of the state is created, which leads to a re-render of the component."
            },
            {
              "question": "What’s the difference between passing a value vs a callback to the setState function?",
              "answer": "Passing a value to the setState function sets the state directly to that value. Passing a callback function allows you to access the previous state value and compute the new state based on the old one, which is useful when the new state depends on the old state."
            },
            {
              "question": "Why would you want to control a component?",
              "answer": "Controlling a component (making it a controlled component) gives you more control over the form values and form handling. The state of the form elements resides in the state property of the component and not in the DOM. This makes it easier to integrate with other UI logic in your component or app."
            },
            {
              "question": "What is an effect?",
              "answer": "In React, an effect is a piece of functionality that can be executed after the component has been rendered. Effects can be used for various tasks like fetching data, managing subscriptions, or manually changing the DOM. These are typically managed in lifecycle methods in class components but can be executed from useEffect hooks in functional components."
            },
            {
              "question": "What constitutes an useEffect hook?",
              "answer": "The useEffect hook takes two arguments: a function that contains the effect and a dependency array. The effect runs when the component mounts and when any of the dependencies change. If the dependency array is empty, the effect runs only when the component mounts and unmounts."
            },
            {
              "question": "What is the one question we can ask to know when to use an effect?",
              "answer": "The question we can ask to know when to use an effect is, 'Do I want to perform this action after the component has rendered and potentially after state or props have changed?' If the answer is yes, we use an effect."
            },
            {
              "question": "What do we mean by lifting up the state?",
              "answer": "Lifting up the state refers to moving the state up to a common ancestor component so that it can be shared between multiple components. This technique can help keep components in sync."
            }
          ]
        },
        {
          "title": "Class Components",
          "flashcards": [
            {
              "question": "How do props get used in a class-based component?",
              "answer": "In a class-based component, props are accessed via the 'this' keyword. For instance, 'this.props.name' would access the 'name' prop."
            },
            {
              "question": "How does JSX get displayed?",
              "answer": "JSX gets displayed after being transpiled to regular JavaScript by a tool such as Babel. Babel transforms the JSX into 'React.createElement' calls, which return objects that React can use to build the DOM. Then, React updates the DOM to match the returned objects."
            },
            {
              "question": "How do we deal with state in a class-based component?",
              "answer": "In a class-based component, state is a property of the component instance and can be initialized in the constructor. You can modify the state using 'this.setState' method, which merges the object you provide into the current state."
            },
            {
              "question": "How do you restore the context of this in a method?",
              "answer": "The context of 'this' in a method can be restored by binding the method to 'this'. This can be done in the constructor (e.g., 'this.myMethod = this.myMethod.bind(this)'), or by using an arrow function, which automatically binds 'this' to the surrounding class context."
            },
            {
              "question": "What is the only required lifecycle method?",
              "answer": "The only required lifecycle method in a React class component is the 'render' method."
            },
            {
              "question": "What lifecycle method should you use for initial data fetching?",
              "answer": "The 'componentDidMount' lifecycle method is usually the best place to fetch initial data in a class-based React component."
            },
            {
              "question": "When you want to act upon change of the DOM, or of state, what lifecycle method would you use?",
              "answer": "When you want to act upon a change of the DOM or state, the 'componentDidUpdate' lifecycle method should be used."
            },
            {
              "question": "When performing cleanup actions, what lifecycle method should be used?",
              "answer": "The 'componentWillUnmount' lifecycle method should be used when performing cleanup actions in a class-based React component."
            },
            {
              "question": "How does the useEffect hook combine some of the lifecycle methods?",
              "answer": "The 'useEffect' hook in React combines the functionality of the 'componentDidMount', 'componentDidUpdate', and 'componentWillUnmount' lifecycle methods from class components. It runs after every render, but you can control when it runs by specifying dependencies or clean up side-effects by returning a cleanup function."
            }
          ]
        },
        {
          "title": "React Testing",
          "flashcards": [
            {
              "question": "What packages are required for React testing?",
              "answer": "The main packages required for React testing include 'react-testing-library', 'jest' and 'user-event'. 'react-testing-library' provides a set of helpers for testing React components, 'jest' is a JavaScript testing framework, and 'user-event' provides a set of interactions that simulate real user interactions."
            },
            {
              "question": "What is the significance of the user-event package?",
              "answer": "The 'user-event' package is used in testing to simulate user interactions. It provides a more realistic and complete testing of interactions compared to simple firing of events, as it takes into consideration the various events that would take place in a real user interaction."
            },
            {
              "question": "What does the render method do?",
              "answer": "The render method in testing, provided by the 'react-testing-library', is used to render a React component into a virtual DOM for testing. It returns an object with functions that can be used for querying the output."
            },
            {
              "question": "What is the most preferred method for querying?",
              "answer": "The most preferred methods for querying are those that resemble how users interact with your site, as stated in the 'react-testing-library' guiding principles. This includes querying by role, text content (like label, placeholder, text, etc.), display value, or testId."
            },
            {
              "question": "How would you test for a click event with userEvent?",
              "answer": "To test for a click event with 'userEvent', you would first render the component, then use the 'userEvent.click()' function, passing in the element that is supposed to be clicked. You can use a query function to get the element."
            },
            {
              "question": "What is the advantage of snapshot tests?",
              "answer": "Snapshot testing allows you to capture the state of your UI and save it as a reference snapshot. Any subsequent test runs will be compared to this snapshot, making it easy to catch and review any unexpected changes."
            },
            {
              "question": "What are the disadvantages of snapshot tests?",
              "answer": "Disadvantages of snapshot tests can include bloated and unreadable snapshots for large components, false positives if snapshots are not reviewed properly before updating, and they might not catch all types of errors, like those involving user interaction or state changes."
            },
            {
              "question": "How can you mock a callback handler?",
              "answer": "You can mock a callback handler in Jest using 'jest.fn()'. This creates a mock function that you can spy on to check if it's called, what arguments it was called with, and how many times it was called."
            },
            {
              "question": "How can you mock a child component?",
              "answer": "You can mock a child component in Jest using 'jest.mock()'. This replaces the actual component with a mock component, allowing you to isolate the behavior of the parent component for testing. You could also create a manual mock in a __mocks__ folder with the same name as the component you want to mock."
            }
          ]
        },
        {
          "title": "The React Ecosystem",
          "flashcards": [
            {
              "question": "How would we set up a basic implementation of PropTypes?",
              "answer": "PropTypes are set up by assigning a 'propTypes' object to the component. Each property on the object corresponds to a prop and its type. For example: 'MyComponent.propTypes = { name: PropTypes.string }'. This specifies that the 'name' prop should be of type string."
            },
            {
              "question": "If we pass in a prop to a component that has a defaultProp defined, what would happen?",
              "answer": "If a prop with a defined defaultProp is passed to a component, the passed prop's value will be used instead of the defaultProp's value. The defaultProp only gets used when the prop is not provided to the component."
            },
            {
              "question": "What is the difference between PropTypes and TypeScript?",
              "answer": "PropTypes is a library that provides runtime type checking for React props. It's lightweight and only checks props. TypeScript is a static type-checking language that gets compiled down to JavaScript. It provides advanced type-checking and error-catching features for the entire JavaScript code, not just props."
            },
            {
              "question": "What does client-side routing mean?",
              "answer": "Client-side routing means that the routing process is handled by the JavaScript running on the client side, instead of the server. When the user navigates, the URL changes but the server does not get hit with a request for a new page. Instead, the new content is loaded dynamically using JavaScript."
            },
            {
              "question": "How do you set up a basic router?",
              "answer": "In React, a basic router is set up using the react-router-dom library. You wrap the app with a BrowserRouter component, and then use Route components to specify which components to render for different paths. The Switch component can be used to only render the first matching Route."
            },
            {
              "question": "What should be used in place of “a” tags to enable client-side routing?",
              "answer": "To enable client-side routing in React, 'Link' or 'NavLink' components from the 'react-router-dom' library should be used instead of 'a' tags. They update the URL and render the new component without causing a page refresh."
            },
            {
              "question": "How do you create nested routes?",
              "answer": "Nested routes in React can be created by defining Route components inside other components. This allows parts of the UI to have their own sub-routes."
            },
            {
              "question": "What do you mean by dynamic segments or URL params?",
              "answer": "Dynamic segments or URL params in routing refer to parts of the URL that can change. They are defined by adding a colon before the segment name in the path (e.g., '/users/:userId'). The value can then be accessed in the component via the 'match.params' object."
            },
            {
              "question": "How do you add a “catch-all” route?",
              "answer": "A 'catch-all' route in React can be added using the '*' path in a Route component. This Route should be the last one inside a Switch component, so that it catches all paths that do not match any of the previous routes."
            },
            {
              "question": "How do you create protected routes?",
              "answer": "Protected routes in React can be created by making a new component that checks if the user is authenticated. If they are, it renders the requested route (passed as a prop). If not, it redirects to a login page. This component can then be used in place of a Route component for paths that should be protected."
            },
            {
              "question": "How can you fetch data from an API in React?",
              "answer": "In React, data can be fetched from an API using the 'fetch' function or libraries like 'axios'. The data is typically fetched in the 'componentDidMount' lifecycle method for class components, or the 'useEffect' hook for functional components."
            },
            {
              "question": "Why should you manually throw errors in fetch requests?",
              "answer": "Fetch does not reject the promise on HTTP error status, even on 404 or 500. Instead, it resolves the promise with the 'ok' property set to 'false'. Therefore, to have fetch promise reject on HTTP error statuses, you need to manually throw an error."
            },
            {
              "question": "How can you avoid waterfalling requests?",
              "answer": "Waterfalling requests can be avoided by using 'Promise.all()'. This function takes an array of promises and returns a new promise that only resolves once all the passed promises have resolved. This allows multiple requests to be made concurrently, instead of waiting for each one to finish before starting the next."
            },
            {
              "question": "How can you use CSS Modules in your React app?",
              "answer": "CSS Modules can be used in a React app by naming your CSS files with the '.module.css' extension. Then, you can import the styles into your component file like you would import a JavaScript module. The imported styles are an object where keys are class names and the values are automatically generated unique class names."
            },
            {
              "question": "What does CSS-in-JS mean?",
              "answer": "CSS-in-JS refers to a pattern where CSS is composed using JavaScript instead of defined in external files. This can be done using libraries like styled-components or emotion. This approach can offer benefits like scoped styles, dynamic styles based on props, and usage of JavaScript variables and functions in your styles."
            },
            {
              "question": "What are component libraries?",
              "answer": "Component libraries are collections of pre-built, reusable components that can be imported and used in your application. They can include components like buttons, forms, modals, etc. Examples include Material-UI, Ant Design, and Bootstrap."
            }
          ]
        },
        {
          "title": "More React Concepts",
          "flashcards": [
            {
              "question": "What are the benefits of using the Context API over passing props down through multiple levels of components?",
              "answer": "The Context API allows for easier sharing of state across multiple components without the need for prop drilling (passing props down through multiple levels). This makes code cleaner, easier to manage, and reduces the complexity of the component tree."
            },
            {
              "question": "What are the drawbacks in using the Context API?",
              "answer": "Using Context API can make components less reusable, as they become dependent on the Context structure. Overuse of Context can also lead to unnecessary re-renders if not managed correctly, because a change in Context will cause all components consuming it to re-render."
            },
            {
              "question": "What are the ways you can avoid prop drilling?",
              "answer": "To avoid prop drilling, you can use state management techniques such as the Context API, Redux, or Recoil. Component composition is another method that can be used to share state or functionality between components."
            },
            {
              "question": "What are reducers?",
              "answer": "Reducers are functions that take the current state and an action, and return a new state. They are used in state management systems like Redux and in the React 'useReducer' hook. Reducers should be pure functions without side-effects."
            },
            {
              "question": "How would you declare a reducer?",
              "answer": "A reducer is declared as a function with two parameters: the current state and an action. The function returns a new state based on the action type. For example, 'const reducer = (state, action) => {...}'"
            },
            {
              "question": "What does the dispatch function do?",
              "answer": "The dispatch function is used to send actions to the reducer in order to update the state. It triggers the reducer with a specific action."
            },
            {
              "question": "What steps can you follow to migrate from useState to useReducer?",
              "answer": "To migrate from useState to useReducer, you need to: 1. Define a reducer function that takes the current state and action, and returns a new state. 2. Replace the useState hook with the useReducer hook, passing in the reducer function and initial state. 3. Replace calls to the state-setting function from useState with dispatch calls, passing in actions that the reducer can handle."
            },
            {
              "question": "Why should you prefer useRef hook over other DOM manipulation methods like querySelector?",
              "answer": "The useRef hook provides a more declarative and React-friendly way to access DOM nodes. It returns a mutable object that can hold a reference to a DOM node and won't cause a re-render when its value changes, unlike state variables."
            },
            {
              "question": "What is the difference between useMemo and useCallback?",
              "answer": "useMemo and useCallback both memoize a value to avoid expensive computations on each render. useMemo returns the memoized result of a function, while useCallback returns a memoized version of the function itself."
            },
            {
              "question": "How do useMemo and useCallback help optimize the performance of React components?",
              "answer": "useMemo and useCallback help optimize performance by memoizing values and preventing unnecessary re-calculations or re-renders. useMemo can be used to memoize the result of a function, while useCallback can be used to memoize a function itself, which can be helpful in preventing unnecessary re-renders when passing callbacks to optimized child components."
            },
            {
              "question": "When should you memoize a value?",
              "answer": "You should consider memoizing a value when: 1. The calculation of the value is computationally expensive and the value doesn't change often. 2. You're passing a callback to a child component that's optimized with React.memo or shouldComponentUpdate, and the function definition would cause the child to re-render unnecessarily."
            }
          ]
        }
      ]
    },
    {
      "title": "NodeJS",
      "lessons": [
        {
          "title": "Introduction to NodeJS",
          "flashcards": [
            {
              "question": "What is back-end development?",
              "answer": "Back-end development refers to the server-side of web application development. This includes interacting with databases, server scripting, API development, handling user authentication and more. It's responsible for storing, processing, and managing data, ensuring everything the front-end needs is accessible and secure."
            },
            {
              "question": "How many parts does the backend consist of?",
              "answer": "The backend generally consists of three main parts: the server, the database, and the application (or server-side scripts)."
            },
            {
              "question": "Name each part of the backend.",
              "answer": "The three main parts of the backend are: 1. Server: This is the computer that receives requests. 2. Application: This could be a Node.js or Python application running on the server, which processes the client's request and sends a response. 3. Database: This is where the data is stored. Examples include MySQL, PostgreSQL, or MongoDB."
            },
            {
              "question": "Where does the backend store its data?",
              "answer": "The backend stores its data in a database. The type of database can vary depending on the application requirements and could be a SQL database like PostgreSQL or MySQL, or a NoSQL database like MongoDB or Cassandra."
            },
            {
              "question": "What problems do frameworks solve?",
              "answer": "Frameworks provide a structured and efficient way to build web applications. They offer predefined methods to handle common tasks, follow design patterns for organizing code, provide tools for error handling, simplify security implementations, facilitate database interactions, and often speed up the development process."
            },
            {
              "question": "Name some popular front-end and back-end frameworks.",
              "answer": "Popular front-end frameworks include React.js, Angular, and Vue.js. On the back-end, popular frameworks include Express.js for Node.js, Django and Flask for Python, and Ruby on Rails for Ruby."
            },
            {
              "question": "Describe the process of choosing a framework.",
              "answer": "Choosing a framework involves evaluating the project requirements, the features provided by the framework, the programming languages you or your team are comfortable with, the size and activity of the framework's community, available learning resources, and the long-term viability of the project. It's also important to consider factors like performance, security features, and scalability."
            },
            {
              "question": "What is a File System Module? How and why would you use it?",
              "answer": "The File System module is a built-in module in Node.js that allows you to work with the file system on your computer. It provides methods for reading files, creating files, updating files, deleting files, renaming files, etc. You would use it whenever you need to perform operations on the file system, for example reading data from files or writing data to files."
            },
            {
              "question": "What is the command for installing a package locally in with npm?",
              "answer": "To install a package locally with npm, you would use the command 'npm install <package-name>'. This will install the package in the node_modules folder in your current directory (project)."
            },
            {
              "question": "What is the command for installing a package globally in with npm?",
              "answer": "To install a package globally with npm, you would use the command 'npm install -g <package-name>'. This installs the package globally so that it can be used in any project on your machine."
            },
            {
              "question": "What is the difference between a global and local package install with npm?",
              "answer": "A local package install with npm will install the package in the node_modules directory of the current project and it will only be accessible within that project. A global install, on the other hand, installs the package in a central location on your system (depends on your system's configuration), allowing the package to be accessed by any project on your system."
            },
            {
              "question": "What are two ways to debug Node?",
              "answer": "Two ways to debug Node.js applications are: 1. Using the built-in Node.js debugger by running the node command followed by debug and the path to the script (e.g., node debug script.js). 2. Using external tools or IDEs that support Node.js debugging, such as Visual Studio Code or Chrome DevTools."
            }
          ]
        },
        {
          "title": "MongoDB",
          "flashcards": [
            {
              "question": "What is the difference between a relational database and a non-relational database?",
              "answer": "A relational database is based on the relational model, which organizes data into tables with rows and columns, and relationships between these tables are structured through foreign keys. They are designed to handle structured data and are good for complex queries. SQL (Structured Query Language) is typically used to interact with these databases. Examples include PostgreSQL, MySQL, and Oracle. On the other hand, non-relational databases, also known as NoSQL databases, do not rely on the traditional row-and-column schema that relational databases use. They are designed to handle unstructured data and can store and process data in many different ways, including document-oriented, column-oriented, graph-based, or key-value pairs. They are highly scalable and are designed to handle large data loads. Examples include MongoDB, Cassandra, and Redis."
            }
          ]
        },
        {
          "title": "Express & Mongoose",
          "flashcards": [
            {
              "question": "What is Express?",
              "answer": "Express.js, or simply Express, is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications. It simplifies the process of writing server-side applications by providing a simple and intuitive API for routing, middleware configuration, and rendering views among other things."
            },
            {
              "question": "What is a module?",
              "answer": "In Node.js, a module is a simple or complex functionality organized in single or multiple JavaScript files which can be reused throughout the Node.js application. Each module in Node.js has its own context, so it cannot interfere with other modules or pollute the global scope."
            },
            {
              "question": "Which are the four most used methods to define route handlers?",
              "answer": "The four most commonly used HTTP methods to define route handlers in Express are GET, POST, PUT, and DELETE."
            },
            {
              "question": "How do we handle errors?",
              "answer": "In Express, errors can be handled using middleware that are loaded after the regular routes. These middleware have a special signature with four arguments (err, req, res, next). If an error is passed to next(), Express will skip all remaining route and middleware functions and invoke the error-handling middleware."
            },
            {
              "question": "How do you use the Express library with NPM in a project?",
              "answer": "You can use the Express library with NPM by first installing it using the command 'npm install express'. After the package is installed, you can include it in your project using require: 'const express = require('express')'."
            },
            {
              "question": "What is middleware?",
              "answer": "In Express, middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the application’s request-response cycle. These functions can execute any code, make changes to the request and the response objects, end the request-response cycle, and call the next middleware function in the stack."
            },
            {
              "question": "What is the req object?",
              "answer": "In Express, the req (request) object represents the HTTP request and has properties for the request query string, parameters, body, HTTP headers, and so on."
            },
            {
              "question": "What is the res object?",
              "answer": "In Express, the res (response) object represents the HTTP response that an Express app sends when it gets an HTTP request."
            },
            {
              "question": "Why is next important?",
              "answer": "The 'next' function in Express is used to pass control to the next matching route handler or middleware. It's important for managing the flow of code execution in your application, especially when performing asynchronous operations, error handling or when several routes/middleware are potentially able to respond to a single request."
            },
            {
              "question": "What does app.use do?",
              "answer": "In Express, app.use() is a method that is used to mount a function or a middleware to a specific route, or to all routes if no path is specified. This function will be executed every time the app receives a request at the specified path, or at any path if none is specified."
            },
            {
              "question": "What does CRUD stand for?",
              "answer": "CRUD stands for Create, Read, Update, and Delete. These are the four basic operations that can be performed with most traditional database systems and they are the cornerstone for interacting with any persistent storage."
            },
            {
              "question": "What does the Model in “MVC” refer to?",
              "answer": "In MVC architecture, the 'Model' represents the data and the business logic. It is responsible for retrieving the data and converting it into meaningful concepts for the application. It is also responsible for data validation, handling transactions, and performing operations on the data."
            },
            {
              "question": "What does the View in “MVC” refer to?",
              "answer": "In MVC architecture, the 'View' represents the user interface and displays the data that the model provides. It is responsible for defining how the application's data should be presented and how the user interacts with it."
            },
            {
              "question": "What does the Controller in “MVC” refer to?",
              "answer": "In MVC architecture, the 'Controller' acts as an intermediary between the Model and the View. It handles the input from the user, updates the Model accordingly, and then updates the View based on the changes in the Model."
            },
            {
              "question": "What’s the difference between static and dynamic websites?",
              "answer": "A static website is one that is primarily built using static pages. These pages don’t change content or layout with every request to the server. On the other hand, a dynamic website's content or layout can change for each user or interaction, often pulling from a database to populate content."
            },
            {
              "question": "What does ‘PaaS’ stand for?",
              "answer": "'PaaS' stands for Platform as a Service. It is a cloud computing model where a third-party provider delivers hardware and software tools to users over the internet. These tools are usually needed for application development."
            },
            {
              "question": "What are the advantages of using a PaaS hosting provider?",
              "answer": "Using a PaaS provider can have several advantages, such as reducing the complexity of infrastructure management, providing a pre-configured environment for development, scaling easily based on application needs, and potentially reducing costs and speeding up development and deployment times."
            },
            {
              "question": "What is an instance?",
              "answer": "In the context of cloud computing, an instance is a virtual server for running applications on the cloud. It is an abstraction of the hardware that is managed by the cloud provider's infrastructure."
            },
            {
              "question": "What steps can you take to diagnose an issue that arises during deployment?",
              "answer": "To diagnose issues during deployment, you can: 1. Check the logs for error messages. 2. Use debugging tools provided by the hosting environment. 3. Test your code locally in an environment that mirrors the production environment. 4. Use version control to track changes and find the cause of the problem."
            },
            {
              "question": "What steps can you take to diagnose an issue that only appears after deployment?",
              "answer": "To diagnose issues that appear only after deployment, you can: 1. Check the application and server logs for any error messages. 2. Try reproducing the issue in a staging environment. 3. Use monitoring and performance tracking tools to understand the application's behavior in production. 4. Review recent changes to the codebase or the infrastructure configuration."
            },
            {
              "question": "How do you define a route function in Express?",
              "answer": "In Express, a route function is defined by specifying the HTTP method, the route path, and the handler function. For example: app.get('/example', function(req, res) { res.send('Hello World!') })"
            },
            {
              "question": "Name four HTTP verbs a route might need to handle.",
              "answer": "Four HTTP verbs that a route might need to handle are: GET, POST, PUT, DELETE."
            },
            {
              "question": "What is a route parameter, and what syntax is used to define one in a route handler?",
              "answer": "A route parameter is a way of capturing dynamic values from the URL. In Express, route parameters are defined using a colon followed by the parameter name, like '/users/:userId'. This value can then be accessed in the request object in the route handler, like 'req.params.userId'."
            },
            {
              "question": "What is a route-handler callback function commonly called?",
              "answer": "A route-handler callback function is commonly called a 'middleware function' in the context of Express, because it has access to the request and response objects and can pass control to the next middleware in the stack."
            }
          ]
        },
        {
          "title": "Authentication",
          "flashcards": [
            {
              "question": "Which passportJS strategy did we use in this lesson?",
              "answer": "As this is a hypothetical question, I can't provide a specific answer. However, common strategies used with PassportJS include 'local' for username/email and password authentication, and OAuth strategies like 'passport-google-oauth20' for Google authentication."
            },
            {
              "question": "Why does passportJS create a cookie?",
              "answer": "PassportJS creates a cookie to maintain session state between requests. When a user logs in, Passport will create a cookie that is sent to the client's browser. This cookie is sent back to the server with every subsequent request, allowing Passport to identify the user and maintain their logged-in state."
            },
            {
              "question": "What does the bcrypt.compare() function do?",
              "answer": "The bcrypt.compare() function is used to compare a plain-text password with a hashed password. It's typically used during the login process: the plain-text password entered by the user is compared with the stored hashed password. If the function returns true, it means the passwords match."
            },
            {
              "question": "Why should we include bcrypt when we begin a project?",
              "answer": "Including bcrypt at the beginning of a project allows us to securely hash and salt passwords that users provide when they create accounts. This is a best practice for storing passwords, as it doesn't expose actual password content, and it helps protect against attacks such as rainbow table and dictionary attacks."
            },
            {
              "question": "What special kind of variable can be used on a server to store secrets?",
              "answer": "Environment variables can be used on a server to store secrets. These are outside the application code and can be easily changed without affecting the application. They also can be different for each environment (development, testing, production), making them perfect for storing sensitive data like API keys or database credentials."
            },
            {
              "question": "What are two widely used packages that can be used to store and import these variables?",
              "answer": "The two widely used packages that can be used to manage environment variables are 'dotenv' and 'node-config'."
            },
            {
              "question": "What is the name of the file dotenv looks for when injecting these variables into our app?",
              "answer": "When injecting these variables into our app, 'dotenv' looks for a file named '.env' in the root directory of the project."
            }
          ]
        },
        {
          "title": "APIs",
          "flashcards": [
            {
              "question": "What does REST stand for?",
              "answer": "REST stands for Representational State Transfer. It is an architectural style for designing networked applications. REST uses a client-server, stateless, cacheable communications protocol, with HTTP being the most common."
            },
            {
              "question": "What are HTTP verbs and why are they important to an API?",
              "answer": "HTTP verbs (GET, POST, PUT, DELETE, etc.) define what action we are trying to perform with our request to the API. They are important because they specify the desired action to be performed on the specified resource."
            },
            {
              "question": "What is the Same-Origin Policy?",
              "answer": "The Same-Origin Policy is a security measure implemented in web browsers to prevent scripts from one domain accessing and interacting with scripts from another domain. This policy helps to prevent cross-site scripting attacks."
            },
            {
              "question": "How do you enable CORS in your Express app?",
              "answer": "To enable Cross-Origin Resource Sharing (CORS) in your Express app, you can use the 'cors' middleware. After installing it with npm, you can use it in your app like this: 'app.use(cors())'."
            },
            {
              "question": "Which HTTP verb does each letter in CRUD (Create, Read, Update, Delete) correspond to?",
              "answer": "In CRUD operations, Create corresponds to POST, Read corresponds to GET, Update corresponds to PUT or PATCH, and Delete corresponds to DELETE."
            },
            {
              "question": "What is a JSON web token?",
              "answer": "A JSON Web Token (JWT) is a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be used for authentication and secure data exchange."
            },
            {
              "question": "What are two things a secure token will do?",
              "answer": "A secure token provides authentication by confirming the identity of the user. Secondly, it allows for secure transmission of information and ensures that the data has not been altered in transit."
            },
            {
              "question": "Where in the code is a secure token passed?",
              "answer": "A secure token is usually passed in the 'Authorization' header of the HTTP request. For example, when using a JWT for authentication, the token is included in the 'Authorization' header with the 'Bearer' scheme."
            }
          ]
        },
        {
          "title": "Testing Express",
          "flashcards": [
            {
              "question": "What is the motivation behind SuperTest?",
              "answer": "SuperTest is designed to make testing HTTP servers easier. It provides a high-level abstraction for testing HTTP requests and responses, while still allowing for more detailed assertions when necessary. Its fluent API makes writing tests more convenient and readable."
            },
            {
              "question": "What is the purpose of done? What convenience does SuperTest provide concerning it?",
              "answer": "In asynchronous testing, 'done' is a callback function that is invoked to signal the completion of the test. SuperTest provides convenience by invoking 'done' automatically when it completes the HTTP assertions, thereby reducing boilerplate and making the tests cleaner."
            },
            {
              "question": "What is the difference in handling errors when using .end() method in conjunction with .expect() provided by SuperTest?",
              "answer": "When using the .expect() method in conjunction with the .end() method, SuperTest will handle errors automatically. If an assertion fails within the .expect() method, it will be passed to .end() as the error. This provides a cleaner API for error handling in your tests."
            },
            {
              "question": "What are the methods provided by SuperAgent to handle multipart requests and how to use them?",
              "answer": "SuperAgent provides the .attach() and .field() methods for multipart requests. .attach() can be used to attach a file to the request, and .field() can be used to add a field to the form being sent with the request."
            },
            {
              "question": "What is the purpose of using a separate database for testing?",
              "answer": "Using a separate database for testing isolates the testing environment from the development and production environments. This prevents tests from altering data in the development or production databases, and ensures that the state of the database is consistent and controlled for each test."
            },
            {
              "question": "How would you create and setup a testing database using the npm package mongodb-memory-server?",
              "answer": "To create a testing database with mongodb-memory-server, you install the package via npm, then in your test setup code, you instantiate a new instance of the MongoMemoryServer class. This will spin up a new, isolated MongoDB instance in memory. You can get the URI for the server using the getUri() method and use it to connect your test database client."
            },
            {
              "question": "What is an alternative method of database setup for your testing environment?",
              "answer": "An alternative to using an in-memory database like mongodb-memory-server is to use a test database in a real MongoDB server. You could have a separate database or even a separate MongoDB instance specifically for testing. You would need to handle setup and teardown of test data for each test or test suite."
            }
          ]
        }
      ]
    }
  ]
}
